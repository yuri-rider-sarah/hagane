extern. file_contents ⇒.(Int : Int)

let. argv map_ι(-(get_argc() 1) λ.(i: map_ι(get_argv_len(+(i 1)) λ.(j: get_argv_byte(+(i 1) j)))))

let. mut, filenames list¡
let. mut, opt_level 0
let. mut, print_ir_unopt ⊥
let. mut, print_ir ⊥
let. mut, cc_args list¡
let. mut, output_file "out"

for‡ argv λ. arg:
    if. if.(>(len(arg) 0) =(get(arg 0) #-) ⊥)
    then, case. arg
        ."-O0" set. opt_level 0
        ."-O1" set. opt_level 1
        ."-O2" set. opt_level 2
        ."-O3" set. opt_level 3
        ."-print-ir-unopt" set. print_ir_unopt ⊤
        ."-print-ir" set. print_ir ⊤
        ._
            if. >(len(arg) 1)
                case. get(arg 1)
                .#L push(~!cc_args drop(arg 2))
                .#o set. output_file drop(arg 2)
                ._ string_error(++("Error: Invalid argument: " arg) 0)
            else, string_error(++("Error: Invalid argument: " arg) 0)
    else, push(~!filenames arg)

if. =(len(filenames) 0)
then, string_error("Error: No input files given" 0)
else, *¡

let. files map‡ filenames λ. filename:
    *.(filename vector→list(utf8_decode(file_contents(list→vector(filename)))))
let. mut, lexer lexer(files)
let. mut, r_exprs list¡
while.
    case. read_token(lexer)
    .*.(_ Eof _ _ _) ⊥
    ._ ⊤
do,
    let. *.(lexer′ r_expr) read_expr(lexer)
    set. lexer lexer′
    push(~!r_exprs r_expr)
let. u_statements r_exprs→u_statements(r_exprs)
let. i_statements u_statements→i_statements(u_statements empty_i_context new_type_var() FilePos(get(argv 0) 1 1))
if. >(len(i_statements) 0)
    case. get(i_statements -(len(i_statements) 1))
    .I_Statement(I_ExprStatement(I_Expr(_ type _)) file_pos) set_type(type I_TupleType(list.()) file_pos)
    ._ *¡
else, *¡
let. t_statements i_statements→t_statements(i_statements empty_t_context)
let. m_statements t_statements→m_statements(t_statements empty_m_context)
fill_f_types()
let. f_statements m_statements→f_statements(m_statements empty_f_context)
※ continued in codegen.hgn
