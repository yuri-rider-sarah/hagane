type. Token
    IntLiteralToken(Int)
    CharLiteral(Int)
    StringLiteral(List(Int))
    IdentToken(List(Int))
    WildcardToken()
    PriKeyword(List(Int))
    SecKeyword(List(Int))
    LParen()
    RParen()
    Apostrophe()
    Colon()
    Hash()
    DoubleDagger()
    Period()
    Eof()

type. CharReader CharReader(
    List(#(List(Int) List(Int))) ※ files
    Int                          ※ file_i
    Int                          ※ char_i
    Int                          ※ line
    Int                          ※ col
)

type. Lexer Lexer(
    CharReader    ※ chars
    Option(Int)   ※ indent_char
    Int           ※ this_indent_depth
    Bool          ※ at_line_start
)

let. mut, read_indent λ.{lexer 'Lexer indent_depth 'Int} #(lexer indent_depth)

let. lexer λ.{files 'List(#(List(Int) List(Int)))}
    let. lexer Lexer(CharReader(files 0 0 1 1) None() 0 ⊤)
    let. #(lexer′ _) read_indent(lexer 0)
    lexer′

let. newline_chars list.(10 11 12 13 133 8232 8233)

let. read_char λ.{chars 'CharReader}
    let. CharReader(files file_i char_i line col) chars
    if. <(file_i len(files))
        let. #(file_name cs) get(files file_i)
        let. c get(cs char_i)
        let. #(file_i′ char_i′ line′ col′)
            if. <(+(char_i 1) len(cs))
                let. #(line′ col′) if. ∧(∈(c newline_chars =) ∨(≠(c 13) ≠(get(cs +(char_i 1)) #!\n))) ※ don't count CR as end of line if followed by LF
                    then, #(+(line 1) 1)
                    else, #(line +(col 1))
                #(file_i +(char_i 1) line′ col′)
            else,
                #(+(file_i 1) 0 1 1)
        #(CharReader(files file_i′ char_i′ line′ col′) Some(c) FilePos(file_name line col))
    else, #(chars None() FilePos("-END-" 0 0))

let. read_char λ.{lexer 'Lexer}
    let. Lexer(chars indent_char this_indent_depth at_line_start) lexer
    let. #(chars′ c file_pos) read_char(chars)
    #(Lexer(chars′ indent_char this_indent_depth at_line_start) c file_pos)

let. after_ident_chars list.(#!( #!) #!{ #!} #!' #!: #!※)

let. read_quoted_char λ.{lexer 'Lexer}
    let. mut, lexer lexer
    let. #(lexer′ c file_pos) read_char(lexer)
    set. lexer lexer′
    match. c
    .Some(#!\\)
        let. #(lexer′ c file_pos) read_char(lexer)
        set. lexer lexer′
        match. c
        .Some(#!\\)
            #(lexer #!\\)
        .Some(#!n)
            #(lexer #!\n)
        .Some(#!")
            #(lexer #!")
        ._
            error(UnexpectedChar(c) file_pos)
            #(lexer 0)
    .Some(c)
        #(lexer c)
    .None()
        error(UnexpectedChar(None()) file_pos)
        #(lexer 0)

let. mut, read_string_literal_contents λ.{lexer 'Lexer s 'List(Int)} #(lexer s)
set. read_string_literal_contents λ.{lexer 'Lexer s 'List(Int)}
    let. mut, lexer lexer
    let. #(lexer′ c file_pos) read_char(lexer)
    match. c
    .Some(#!")
        set. lexer lexer′
        #(lexer s)
    .Some(c)
        let. #(lexer′ c) read_quoted_char(lexer)
        set. lexer lexer′
        read_string_literal_contents(lexer push(s c))
    .None()
        error(UnexpectedChar(None()) file_pos)
        #(lexer s)

let. mut, read_int_literal λ.{lexer 'Lexer n 'Int} #(lexer n)
set. read_int_literal λ.{lexer 'Lexer n 'Int}
    let. mut, lexer lexer
    let. #(lexer′ c file_pos) read_char(lexer)
    match. c
    .Some(c)
        if. ∧(≤(#!0 c) ≤(c #!9))
            set. lexer lexer′
            read_int_literal(lexer +(*(n 10) -(c #!0)))
        else,
            #(lexer n)
    .None()
        #(lexer n)

let. mut, read_identifier λ.{lexer 'Lexer s 'List(Int)} #(lexer s)
set. read_identifier λ.{lexer 'Lexer s 'List(Int)}
    let. mut, lexer lexer
    let. #(lexer′ c file_pos) read_char(lexer)
    match. c
    .Some(c)
        if. is_ident_character(c)
            set. lexer lexer′
            read_identifier(lexer push(s c))
        else,
            #(lexer s)
    .None()
        #(lexer s)

let. check_after_ident λ.{lexer 'Lexer}
    let. #(_ c file_pos) read_char(lexer)
    match. c
    .Some(c)
        if. ∨(is_white_space(c) ∈(c after_ident_chars =))
            #()
        else,
            error(UnexpectedChar(Some(c)) file_pos)
    .None()
        #()

let. read_token_char λ.{lexer 'Lexer}
    let. mut, lexer lexer
    set. lexer
        let. Lexer(chars indent_char this_indent_depth _) lexer
        Lexer(chars indent_char this_indent_depth ⊥)
    let. #(lexer′ c file_pos) read_char(lexer)
    set. lexer lexer′
    match. c
    .Some(#!() #(lexer LParen() file_pos)
    .Some(#!)) #(lexer RParen() file_pos)
    .Some(#!') #(lexer Apostrophe() file_pos)
    .Some(#!:) #(lexer Colon() file_pos)
    .Some(#!‡) #(lexer DoubleDagger() file_pos)
    .Some(#!.) #(lexer Period() file_pos)
    .Some(#!#)
        match. read_char(lexer)
        .#(lexer′ Some(#!!) _)
            set. lexer lexer′
            let. #(lexer′ c) read_quoted_char(lexer)
            set. lexer lexer′
            check_after_ident(lexer)
            #(lexer CharLiteral(c) file_pos)
        ._ #(lexer Hash() file_pos)
    .Some(#!")
        let. #(lexer′ str) read_string_literal_contents(lexer empty)
        set. lexer lexer′
        check_after_ident(lexer)
        #(lexer StringLiteral(str) file_pos)
    .Some(c)
        cond.
        .∧(≤(#!0 c) ≤(c #!9))
            let. #(lexer′ n) read_int_literal(lexer -(c #!0))
            set. lexer lexer′
            check_after_ident(lexer)
            #(lexer IntLiteralToken(n) file_pos)
        .is_starting_ident_character(c)
            let. #(lexer′ s) read_identifier(lexer list.(c))
            set. lexer lexer′
            if. =list(s "_" =)
                check_after_ident(lexer)
                #(lexer WildcardToken() file_pos)
            else,
                match. read_char(lexer)
                .#(lexer′ Some(#!.) _)
                    set. lexer lexer′
                    check_after_ident(lexer)
                    #(lexer PriKeyword(s) file_pos)
                .#(lexer′ Some(#!,) _)
                    set. lexer lexer′
                    check_after_ident(lexer)
                    #(lexer SecKeyword(s) file_pos)
                .#(_ _ _)
                    check_after_ident(lexer)
                    #(lexer IdentToken(s) file_pos)
        .⊤
            error(UnexpectedChar(Some(c)) file_pos)
            #(lexer Eof() file_pos)
    .None()
        #(lexer Eof() file_pos)

let. mut, skip_comment λ.{lexer 'Lexer} lexer
set. skip_comment λ.{lexer 'Lexer}
    let. mut, lexer lexer
    match. read_char(lexer)
    .#(lexer′ Some(c) _)
        if. ∈(c newline_chars =)
            lexer
        else,
            set. lexer lexer′
            skip_comment(lexer)
    .#(_ None() _) lexer

set. read_indent λ.{lexer 'Lexer indent_depth 'Int}
    let. mut, lexer lexer
    match. read_char(lexer)
    .#(lexer′ Some(c) file_pos)
        cond.
        .=(c #!※)
            set. lexer lexer′
            set. lexer skip_comment(lexer)
            read_indent(lexer 0)
        .∈(c newline_chars =)
            set. lexer lexer′
            read_indent(lexer 0)
        .is_white_space(c)
            set. lexer lexer′
            let. Lexer(chars indent_char _ at_line_start) lexer
            match. indent_char
            .None()
                set. lexer Lexer(chars Some(c) indent_depth at_line_start)
                read_indent(lexer +(indent_depth 1))
            .Some(indent_char)
                if. =(c indent_char)
                    set. lexer Lexer(chars Some(indent_char) indent_depth at_line_start)
                    read_indent(lexer +(indent_depth 1))
                else,
                    error(UnexpectedChar(Some(c)) file_pos)
                    #(lexer indent_depth)
        .⊤
            let. Lexer(chars indent_char _ at_line_start) lexer
            set. lexer Lexer(chars indent_char indent_depth at_line_start)
            #(lexer indent_depth)
    .#(_ None() _)
        let. Lexer(chars indent_char _ at_line_start) lexer
        set. lexer Lexer(chars indent_char indent_depth at_line_start)
        #(lexer indent_depth)

let. mut, read_token λ.{lexer 'Lexer} #(lexer Eof() FilePos(empty 0 0))
set. read_token λ.{lexer 'Lexer}
    let. mut, lexer lexer
    let. #(lexer′ c file_pos) read_char(lexer)
    match. c
    .Some(c) cond.
        .=(c #!※)
            set. lexer lexer′
            set. lexer skip_comment(lexer)
            read_token(lexer)
        .∈(c newline_chars =)
            set. lexer lexer′
            let. #(lexer′ indent_depth) read_indent(lexer 0)
            set. lexer lexer′
            read_token_char(lexer)
        .is_white_space(c)
            set. lexer lexer′
            read_token(lexer)
        .⊤ read_token_char(lexer)
    .None()
        read_token_char(lexer)

let. mut, lexer_at_line_start λ.{lexer 'Lexer} ⊤
set. lexer_at_line_start λ.{lexer 'Lexer}
    let. Lexer(_ _ _ at_line_start) lexer
    if. at_line_start then, ⊤
    else,
        let. #(lexer′ c _) read_char(lexer)
        match. c
        .Some(c) cond.
            .∨(=(c #!※) ∈(c newline_chars =)) ⊤
            .is_white_space(c) lexer_at_line_start(lexer′)
            .⊤ ⊥
        .None() ⊤

let. lexer_indent_depth λ.{lexer 'Lexer}
    let. Lexer(_ _ this_indent_depth _) lexer
    if. lexer_at_line_start(lexer)
        let. #(_ indent) read_indent(lexer 0)
        indent
    else,
        this_indent_depth
