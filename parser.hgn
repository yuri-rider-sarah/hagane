type. R_ExprData
    R_IntLiteral(Int)
    R_CharLiteral(Int)
    R_StringLiteral(List(Int))
    R_Ident(List(Int))
    R_Wildcard
    R_Apply(R_Expr List(Clause))
    R_Special(List(Int) List(Clause))

type. R_Expr R_Expr(R_ExprData FilePos)

type. Clause
    ExprClause(R_Expr)
    SecKeywordClause(List(Int))
    ColonClause
    Label(R_Expr)

type. SpecialExprType
    ParenSE
    BlockSE
    InnerSE

fun. read_noncall_expr(∈.(lexer Lexer))
    let. mut, lexer lexer
    let. *.(lexer′ token at_line_start indent_depth file_pos) read_token(lexer)
    set. lexer lexer′
    case. token
    .IntLiteralToken(n) *.(lexer R_Expr(R_IntLiteral(n) file_pos))
    .CharLiteral(c) *.(lexer R_Expr(R_CharLiteral(c) file_pos))
    .StringLiteral(s) *.(lexer R_Expr(R_StringLiteral(s) file_pos))
    .IdentToken(s) *.(lexer R_Expr(R_Ident(s) file_pos))
    .WildcardToken *.(lexer R_Expr(R_Wildcard file_pos))
    .PriKeyword(kw)
        let. *.(lexer′ clauses) case. read_token(lexer)
            .*.(lexer′ LParen _ _ _)
                set. lexer lexer′
                read_paren_clauses_r(lexer indent_depth)
            ._ if. at_line_start
                then, read_block_clauses_r(lexer indent_depth)
                else, read_inner_clauses_r(lexer indent_depth)
        set. lexer lexer′
        *.(lexer R_Expr(R_Special(kw clauses) file_pos))
    .PriKeywordOne(kw)
        let. *.(lexer′ clause) read_clause(lexer)
        set. lexer lexer′
        *.(lexer R_Expr(R_Special(kw list.(clause)) file_pos))
    .PriKeywordZero(kw)
        *.(lexer R_Expr(R_Special(kw list¡) file_pos))
    ._ error(UnexpectedToken(token) file_pos)

fun. read_expr(∈.(lexer Lexer))
    let. mut, lexer lexer
    let. *.(_ _ at_line_start indent_depth _) read_token(lexer)
    let. *.(lexer′ expr) read_noncall_expr(lexer)
    set. lexer lexer′
    read_expr_calls(lexer expr at_line_start indent_depth)

fun. read_expr_calls(∈.(lexer Lexer) ∈.(expr R_Expr) ∈.(at_line_start Bool) ∈.(indent_depth Int))
    let. mut, lexer lexer
    let. R_Expr(_ file_pos) expr
    case. read_token(lexer)
    .*.(lexer′ LParen _ _ _)
        set. lexer lexer′
        let. *.(lexer′ clauses) read_paren_clauses_r(lexer indent_depth)
        set. lexer lexer′
        read_expr_calls(lexer R_Expr(R_Apply(expr clauses) file_pos) at_line_start indent_depth)
    .*.(lexer′ CallToken _ _ _)
        set. lexer lexer′
        let. *.(lexer′ clauses) if. at_line_start
            then, read_block_clauses_r(lexer indent_depth)
            else, read_inner_clauses_r(lexer indent_depth)
        set. lexer lexer′
        *.(lexer R_Expr(R_Apply(expr clauses) file_pos))
    .*.(lexer′ CallOneToken _ _ _)
        set. lexer lexer′
        let. *.(lexer′ clause) read_clause(lexer)
        set. lexer lexer′
        *.(lexer R_Expr(R_Apply(expr list.(clause)) file_pos))
    ._
        *.(lexer expr)

fun. read_clause(∈.(lexer Lexer))
    let. mut, lexer lexer
    let. *.(lexer′ token _ _ _) read_token(lexer)
    case. token
    .SecKeyword(skw)
        set. lexer lexer′
        *.(lexer SecKeywordClause(skw))
    .Colon
        set. lexer lexer′
        *.(lexer ColonClause)
    .Period
        set. lexer lexer′
        let. *.(lexer′ expr) read_expr(lexer)
        set. lexer lexer′
        *.(lexer Label(expr))
    ._
        let. *.(lexer′ expr) read_expr(lexer)
        set. lexer lexer′
        *.(lexer ExprClause(expr))

fun. read_clauses_r(∈.(lexer Lexer) ∈.(kw_indent_depth Int) ~!clauses ∈.(se_type SpecialExprType))
    let. mut, lexer lexer
    let. *.(lexer′ token at_line_start clause_indent_depth token_file_pos) read_token(lexer)
    let. separator_continue ∨. ¬(at_line_start) case. se_type
        .ParenSE ⊤
        .BlockSE ≥(clause_indent_depth kw_indent_depth)
        .InnerSE >(clause_indent_depth kw_indent_depth)
    let. content_continue ∨. ¬(at_line_start) case. se_type
        .ParenSE ⊤
        .BlockSE >(clause_indent_depth kw_indent_depth)
        .InnerSE >(clause_indent_depth kw_indent_depth)

    case. token
    .RParen
        case. se_type
        .ParenSE set. lexer lexer′
        ._ *¡
        *.(lexer clauses)
    .Eof
        case. se_type
        .ParenSE error(UnexpectedToken(Eof) token_file_pos)
        ._ *¡
        *.(lexer clauses)
    .SecKeyword(skw)
        if. separator_continue
            set. lexer lexer′
            push(~!clauses SecKeywordClause(skw))
            read_clauses_r(lexer kw_indent_depth ~!clauses se_type)
        else,
            *.(lexer clauses)
    .Colon
        if. separator_continue
            set. lexer lexer′
            push(~!clauses ColonClause)
            read_clauses_r(lexer kw_indent_depth ~!clauses se_type)
        else,
            *.(lexer clauses)
    .Period
        if. separator_continue
            set. lexer lexer′
            let. *.(lexer′ expr) read_expr(lexer)
            set. lexer lexer′
            push(~!clauses Label(expr))
            read_clauses_r(lexer kw_indent_depth ~!clauses se_type)
        else,
            *.(lexer clauses)
    ._
        if. content_continue
            let. *.(lexer′ expr) read_expr(lexer)
            set. lexer lexer′
            push(~!clauses ExprClause(expr))
            read_clauses_r(lexer kw_indent_depth ~!clauses se_type)
        else,
            *.(lexer clauses)

fun. read_paren_clauses_r(∈.(lexer Lexer) ∈.(kw_indent_depth Int))
    let. mut, clauses list¡
    read_clauses_r(lexer kw_indent_depth ~!clauses ParenSE)

fun. read_block_clauses_r(∈.(lexer Lexer) ∈.(kw_indent_depth Int))
    let. mut, clauses list¡
    read_clauses_r(lexer kw_indent_depth ~!clauses BlockSE)

fun. read_inner_clauses_r(∈.(lexer Lexer) ∈.(kw_indent_depth Int))
    let. mut, clauses list¡
    read_clauses_r(lexer kw_indent_depth ~!clauses InnerSE)
