type. RawExprData
    RawIntLiteral(Int)
    RawCharLiteral(Int)
    RawStringLiteral(List(Int))
    RawIdent(List(Int))
    RawWildcard()
    RawTuple(List(RawExpr))
    RawFunctionExpr(List(RawExpr) RawExpr)
    RawTyped(RawExpr RawExpr)
    RawApply(RawExpr List(RawExpr))
    SpecialExpr(List(Int) List(Clause))

type. RawExpr RawExpr(RawExprData FilePos)

let. dummy_raw_expr RawExpr(RawWildcard() FilePos(empty[Int] 0 0))

let. mut, read_noncall_expr λ.{lexer 'Lexer} #(lexer dummy_raw_expr)
let. mut, read_expr λ.{lexer 'Lexer} #(lexer dummy_raw_expr)
let. mut, read_arg_list_r λ.{lexer 'Lexer exprs 'List(RawExpr)} #(lexer exprs)
let. mut, read_arg_list λ.{lexer 'Lexer} #(lexer empty[RawExpr])
let. mut, read_arg_list_cr λ.{lexer 'Lexer exprs 'List(RawExpr)} #(lexer exprs)
let. mut, read_arg_list_c λ.{lexer 'Lexer} #(lexer empty[RawExpr])
let. mut, read_expr_calls λ.{lexer 'Lexer expr 'RawExpr} #(lexer expr)
let. mut, read_block_expr λ.{lexer 'Lexer} #(lexer dummy_raw_expr)
let. mut, read_clause_expr λ.{lexer 'Lexer} #(lexer dummy_raw_expr)
let. mut, read_brace_block_r λ.{lexer 'Lexer exprs 'List(RawExpr)} #(lexer exprs)
let. mut, read_indent_block_r λ.{lexer 'Lexer exprs 'List(RawExpr)} #(lexer exprs)
let. mut, read_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) clauses 'List(Clause) file_pos 'FilePos se_type 'SpecialExprType} #(lexer dummy_raw_expr)
let. mut, read_paren_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) file_pos 'FilePos} #(lexer dummy_raw_expr)
let. mut, read_block_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) file_pos 'FilePos} #(lexer dummy_raw_expr)
let. mut, read_clause_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) file_pos 'FilePos} #(lexer dummy_raw_expr)
let. mut, skip_monomorphization_r λ.{lexer 'Lexer} lexer

set. read_noncall_expr λ.{lexer 'Lexer}
    let. mut, lexer lexer
    let. #(lexer′ token file_pos) read_token(lexer)
    set. lexer lexer′
    match. token
    .IntLiteralToken(n) #(lexer RawExpr(RawIntLiteral(n) file_pos))
    .CharLiteral(c) #(lexer RawExpr(RawCharLiteral(c) file_pos))
    .StringLiteral(s) #(lexer RawExpr(RawStringLiteral(s) file_pos))
    .IdentToken(s)
        match. read_token(lexer)
        .#(lexer′ LBracket() _)
            set. lexer lexer′
            set. lexer skip_monomorphization_r(lexer)
            #(lexer RawExpr(RawIdent(s) file_pos))
        .#(lexer′ Apostrophe() _)
            set. lexer lexer′
            let. #(lexer′ type) read_expr(lexer)
            set. lexer lexer′
            #(lexer RawExpr(RawTyped(RawExpr(RawIdent(s) file_pos) type) file_pos))
        ._ #(lexer RawExpr(RawIdent(s) file_pos))
    .WildcardToken() #(lexer RawExpr(RawWildcard() file_pos))
    .Hash()
        let. #(lexer′ args) read_arg_list(lexer)
        set. lexer lexer′
        #(lexer RawExpr(RawTuple(args) file_pos))
    .DoubleDagger()
        let. #(lexer′ args) read_arg_list_c(lexer)
        set. lexer lexer′
        let. #(lexer′ ret) read_expr(lexer)
        set. lexer lexer′
        let. #(lexer′ right right_file_pos) read_token(lexer)
        set. lexer lexer′
        match. right
        .RParen() #()
        ._ error(UnexpectedToken(right) right_file_pos)
        #(lexer RawExpr(RawFunctionExpr(args ret) file_pos))
    .PriKeyword(kw)
        let. indent_depth lexer_indent_depth(lexer)
        let. #(lexer′ left left_file_pos) read_token(lexer)
        set. lexer lexer′
        match. left
        .LParen() #()
        ._ error(UnexpectedToken(left) left_file_pos)
        read_paren_special_expr_r(lexer indent_depth kw file_pos)
    ._
        error(UnexpectedToken(token) file_pos)
        #(lexer dummy_raw_expr)

set. read_expr λ.{lexer 'Lexer}
    let. mut, lexer lexer
    let. #(lexer′ expr) read_noncall_expr(lexer)
    set. lexer lexer′
    read_expr_calls(lexer expr)

set. read_expr_calls λ.{lexer 'Lexer expr 'RawExpr}
    let. mut, lexer lexer
    let. RawExpr(_ file_pos) expr
    match. read_token(lexer)
    .#(lexer′ LParen() _)
        set. lexer lexer′
        let. #(lexer′ args) read_arg_list_r(lexer empty[RawExpr])
        set. lexer lexer′
        read_expr_calls(lexer RawExpr(RawApply(expr args) file_pos))
    ._
        #(lexer expr)

set. read_arg_list_r λ.{lexer 'Lexer exprs 'List(RawExpr)}
    let. mut, lexer lexer
    match. read_token(lexer)
    .#(lexer′ RParen() _)
        #(lexer′ exprs)
    ._
        let. #(lexer′ expr) read_expr(lexer)
        set. lexer lexer′
        read_arg_list_r(lexer push[RawExpr](exprs expr))

set. read_arg_list λ.{lexer 'Lexer}
    let. mut, lexer lexer
    let. #(lexer′ token file_pos) read_token(lexer)
    set. lexer lexer′
    match. token
    .LParen() #()
    ._ error(UnexpectedToken(token) file_pos)
    read_arg_list_r(lexer empty[RawExpr])

set. read_arg_list_cr λ.{lexer 'Lexer exprs 'List(RawExpr)}
    let. mut, lexer lexer
    match. read_token(lexer)
    .#(lexer′ Colon() _)
        #(lexer′ exprs)
    ._
        let. #(lexer′ expr) read_expr(lexer)
        set. lexer lexer′
        read_arg_list_cr(lexer push[RawExpr](exprs expr))

set. read_arg_list_c λ.{lexer 'Lexer}
    let. mut, lexer lexer
    let. #(lexer′ token file_pos) read_token(lexer)
    set. lexer lexer′
    match. token
    .LParen() #()
    ._ error(UnexpectedToken(token) file_pos)
    read_arg_list_cr(lexer empty[RawExpr])

set. read_block_expr λ.{lexer 'Lexer}
    let. mut, lexer lexer
    match. read_token(lexer)
    .#(lexer′ PriKeyword(kw) file_pos)
        set. lexer lexer′
        let. indent_depth lexer_indent_depth(lexer)
        match. read_token(lexer)
        .#(lexer′ LParen() _)
            set. lexer lexer′
            read_paren_special_expr_r(lexer indent_depth kw file_pos)
        ._
            read_block_special_expr_r(lexer indent_depth kw file_pos)
    ._
        read_expr(lexer)

set. read_clause_expr λ.{lexer 'Lexer}
    let. mut, lexer lexer
    match. read_token(lexer)
    .#(lexer′ PriKeyword(kw) file_pos)
        set. lexer lexer′
        let. indent_depth lexer_indent_depth(lexer)
        match. read_token(lexer)
        .#(lexer′ LParen() _)
            set. lexer lexer′
            read_paren_special_expr_r(lexer indent_depth kw file_pos)
        ._
            read_clause_special_expr_r(lexer indent_depth kw file_pos)
    ._
        read_expr(lexer)

type. Clause
    SecKeywordClause(List(Int))
    Label(RawExpr)
    Block(List(RawExpr))

set. read_brace_block_r λ.{lexer 'Lexer exprs 'List(RawExpr)}
    let. mut, lexer lexer
    match. read_token(lexer)
    .#(lexer′ RBrace() _)
        set. lexer lexer′
        #(lexer exprs)
    ._
        let. #(lexer′ expr) read_block_expr(lexer)
        set. lexer lexer′
        read_brace_block_r(lexer push[RawExpr](exprs expr))

set. read_indent_block_r λ.{lexer 'Lexer exprs 'List(RawExpr)}
    let. mut, lexer lexer
    match. read_token(lexer)
    .#(lexer′ RIndent() _)
        set. lexer lexer′
        #(lexer exprs)
    ._
        let. #(lexer′ expr) read_block_expr(lexer)
        set. lexer lexer′
        read_indent_block_r(lexer push[RawExpr](exprs expr))

type. SpecialExprType
    ParenSE()
    BlockSE()
    ClauseSE(Bool)

set. read_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) clauses 'List(Clause) file_pos 'FilePos se_type 'SpecialExprType}
    let. mut, lexer lexer
    let. mut, se_type se_type
    let. at_line_start lexer_at_line_start(lexer)

    let. end_expr λ.{lexer 'Lexer expr 'RawExpr}
        let. lexer′ match. se_type
            .ClauseSE(past_indent)
                if. past_indent
                    let. #(lexer′ token token_file_pos) read_token(lexer)
                    match. token
                    .RIndent() #()
                    ._ error(UnexpectedToken(token) token_file_pos)
                    lexer′
                else,
                    lexer
            ._ lexer
        #(lexer′ expr)

    let. get_unindented_token λ.{continue '‡(: #(Lexer RawExpr))}
        match. se_type
        .ParenSE() continue()
        .BlockSE() continue()
        .ClauseSE(past_indent) if. ∧(at_line_start ¬(past_indent))
            then, end_expr(lexer RawExpr(SpecialExpr(kw clauses) file_pos))
            else, continue()

    match. read_token_or_indent(lexer indent_depth)
    .#(lexer′ RParen() token_file_pos)
        match. se_type
        .ParenSE() #()
        ._ error(UnexpectedToken(RParen()) token_file_pos)
        set. lexer lexer′
        end_expr(lexer RawExpr(SpecialExpr(kw clauses) file_pos))
    .#(_ RBrace() token_file_pos)
        match. se_type
        .ParenSE() error(UnexpectedToken(RBrace()) token_file_pos)
        ._ #()
        end_expr(lexer RawExpr(SpecialExpr(kw clauses) file_pos))
    .#(_ RIndent() token_file_pos)
        match. se_type
        .ParenSE() error(UnexpectedToken(RIndent()) token_file_pos)
        ._ #()
        end_expr(lexer RawExpr(SpecialExpr(kw clauses) file_pos))
    .#(_ Eof() token_file_pos)
        match. se_type
        .ParenSE() error(UnexpectedToken(Eof()) token_file_pos)
        ._ #()
        end_expr(lexer RawExpr(SpecialExpr(kw clauses) file_pos))

    .#(lexer′ SecKeyword(skw) _)
        get_unindented_token(λ.({}
            set. lexer lexer′
            read_special_expr_r(lexer indent_depth kw push[Clause](clauses SecKeywordClause(skw)) file_pos se_type)
        ))
    .#(lexer′ Period() _)
        get_unindented_token(λ.({}
            set. lexer lexer′
            let. #(lexer′ expr) read_expr(lexer)
            set. lexer lexer′
            read_special_expr_r(lexer indent_depth kw push[Clause](clauses Label(expr)) file_pos se_type)
        ))
    .#(lexer′ LBrace() _)
        get_unindented_token(λ.({}
            set. lexer lexer′
            let. #(lexer′ exprs) read_brace_block_r(lexer empty[RawExpr])
            set. lexer lexer′
            read_special_expr_r(lexer indent_depth kw push[Clause](clauses Block(exprs)) file_pos se_type)
        ))

    .#(lexer′ LIndent() _)
        let. reset_indentation λ.{lexer′ 'Lexer}
            match. se_type
            .ClauseSE(past_indent)
                if. past_indent
                    let. #(lexer′ _ _) read_token(lexer)
                    set. lexer lexer′
                else,
                    set. lexer lexer′
                    set. se_type ClauseSE(⊤)
            ._
                let. #(lexer′ _ _) read_token(lexer)
                set. lexer lexer′
        match. read_token(lexer′)
        .#(lexer′ RParen() token_file_pos)
            reset_indentation(lexer′)
            match. se_type
            .ParenSE() #()
            ._ error(UnexpectedToken(RParen()) token_file_pos)
            end_expr(lexer RawExpr(SpecialExpr(kw clauses) file_pos))
        .#(lexer′ SecKeyword(skw) _)
            reset_indentation(lexer′)
            read_special_expr_r(lexer indent_depth kw push[Clause](clauses SecKeywordClause(skw)) file_pos se_type)
        .#(lexer′ Period() _)
            reset_indentation(lexer′)
            let. #(lexer′ expr) read_expr(lexer)
            set. lexer lexer′
            read_special_expr_r(lexer indent_depth kw push[Clause](clauses Label(expr)) file_pos se_type)
        .#(lexer′ LBrace() _)
            reset_indentation(lexer′)
            let. #(lexer′ exprs) read_brace_block_r(lexer empty[RawExpr])
            set. lexer lexer′
            read_special_expr_r(lexer indent_depth kw push[Clause](clauses Block(exprs)) file_pos se_type)
        ._
            set. lexer lexer′
            let. #(lexer′ exprs) read_indent_block_r(lexer empty[RawExpr])
            set. lexer lexer′
            read_special_expr_r(lexer indent_depth kw push[Clause](clauses Block(exprs)) file_pos se_type)

    ._
        match. se_type
        .ParenSE()
            let. #(lexer′ expr) read_expr(lexer)
            set. lexer lexer′
            read_special_expr_r(lexer indent_depth kw push[Clause](clauses Block(list.(expr))) file_pos se_type)
        ._ if. at_line_start
            then, end_expr(lexer RawExpr(SpecialExpr(kw clauses) file_pos))
            else,
                let. #(lexer′ expr) read_clause_expr(lexer)
                set. lexer lexer′
                read_special_expr_r(lexer indent_depth kw push[Clause](clauses Block(list.(expr))) file_pos se_type)

set. read_paren_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) file_pos 'FilePos}
    read_special_expr_r(lexer indent_depth kw empty[Clause] file_pos ParenSE())

set. read_block_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) file_pos 'FilePos}
    read_special_expr_r(lexer indent_depth kw empty[Clause] file_pos BlockSE())

set. read_clause_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) file_pos 'FilePos}
    read_special_expr_r(lexer indent_depth kw empty[Clause] file_pos ClauseSE(⊥))

set. skip_monomorphization_r λ.{lexer 'Lexer}
    let. mut, lexer lexer
    let. #(lexer′ token _) read_token(lexer)
    set. lexer lexer′
    match. token
    .RBracket() lexer
    ._ skip_monomorphization_r(lexer)
