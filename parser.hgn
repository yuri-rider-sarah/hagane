type. R_ExprData
    R_IntLiteral(Int)
    R_CharLiteral(Int)
    R_StringLiteral(List(Int))
    R_Ident(List(Int))
    R_Wildcard()
    R_Tuple(List(R_Expr))
    R_FunctionExpr(List(R_Expr) R_Expr)
    R_Typed(R_Expr R_Expr)
    R_Apply(R_Expr List(R_Expr))
    R_Special(List(Int) List(Clause))

type. R_Expr R_Expr(R_ExprData FilePos)

let. dummy_r_expr R_Expr(R_Wildcard() FilePos(empty 0 0))

let. mut, read_noncall_expr λ.{lexer 'Lexer} #(lexer dummy_r_expr)
let. mut, read_expr λ.{lexer 'Lexer} #(lexer dummy_r_expr)
let. mut, read_arg_list_r λ.{lexer 'Lexer exprs 'List(R_Expr)} #(lexer exprs)
let. mut, read_arg_list λ.{lexer 'Lexer} #(lexer empty)
let. mut, read_arg_list_cr λ.{lexer 'Lexer exprs 'List(R_Expr)} #(lexer exprs)
let. mut, read_arg_list_c λ.{lexer 'Lexer} #(lexer empty)
let. mut, read_expr_calls λ.{lexer 'Lexer expr 'R_Expr} #(lexer expr)
let. mut, read_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) clauses 'List(Clause) file_pos 'FilePos se_type 'SpecialExprType} #(lexer dummy_r_expr)
let. mut, read_paren_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) file_pos 'FilePos} #(lexer dummy_r_expr)
let. mut, read_block_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) file_pos 'FilePos} #(lexer dummy_r_expr)
let. mut, read_inner_special_expr_r λ.{lexer 'Lexer indent_depth 'Int kw 'List(Int) file_pos 'FilePos} #(lexer dummy_r_expr)

set. read_noncall_expr λ.{lexer 'Lexer}
    let. mut, lexer lexer
    let. #(lexer′ token at_line_start indent_depth file_pos) read_token(lexer)
    set. lexer lexer′
    match. token
    .IntLiteralToken(n) #(lexer R_Expr(R_IntLiteral(n) file_pos))
    .CharLiteral(c) #(lexer R_Expr(R_CharLiteral(c) file_pos))
    .StringLiteral(s) #(lexer R_Expr(R_StringLiteral(s) file_pos))
    .IdentToken(s)
        match. read_token(lexer)
        .#(lexer′ Apostrophe() _ _ _)
            set. lexer lexer′
            let. #(lexer′ type) read_expr(lexer)
            set. lexer lexer′
            #(lexer R_Expr(R_Typed(R_Expr(R_Ident(s) file_pos) type) file_pos))
        ._ #(lexer R_Expr(R_Ident(s) file_pos))
    .WildcardToken() #(lexer R_Expr(R_Wildcard() file_pos))
    .Hash()
        let. #(lexer′ args) read_arg_list(lexer)
        set. lexer lexer′
        #(lexer R_Expr(R_Tuple(args) file_pos))
    .DoubleDagger()
        let. #(lexer′ args) read_arg_list_c(lexer)
        set. lexer lexer′
        let. #(lexer′ ret) read_expr(lexer)
        set. lexer lexer′
        let. #(lexer′ right _ _ right_file_pos) read_token(lexer)
        set. lexer lexer′
        match. right
        .RParen() #()
        ._ error(UnexpectedToken(right) right_file_pos)
        #(lexer R_Expr(R_FunctionExpr(args ret) file_pos))
    .PriKeyword(kw)
        match. read_token(lexer)
        .#(lexer′ LParen() _ _ _)
            set. lexer lexer′
            read_paren_special_expr_r(lexer indent_depth kw file_pos)
        ._ if. at_line_start
            then, read_block_special_expr_r(lexer indent_depth kw file_pos)
            else, read_inner_special_expr_r(lexer indent_depth kw file_pos)
    ._
        error(UnexpectedToken(token) file_pos)
        #(lexer dummy_r_expr)

set. read_expr λ.{lexer 'Lexer}
    let. mut, lexer lexer
    let. #(lexer′ expr) read_noncall_expr(lexer)
    set. lexer lexer′
    read_expr_calls(lexer expr)

set. read_expr_calls λ.{lexer 'Lexer expr 'R_Expr}
    let. mut, lexer lexer
    let. R_Expr(_ file_pos) expr
    match. read_token(lexer)
    .#(lexer′ LParen() _ _ _)
        set. lexer lexer′
        let. #(lexer′ args) read_arg_list_r(lexer empty)
        set. lexer lexer′
        read_expr_calls(lexer R_Expr(R_Apply(expr args) file_pos))
    ._
        #(lexer expr)

set. read_arg_list_r λ.{lexer 'Lexer exprs 'List(R_Expr)}
    let. mut, lexer lexer
    match. read_token(lexer)
    .#(lexer′ RParen() _ _ _)
        #(lexer′ exprs)
    ._
        let. #(lexer′ expr) read_expr(lexer)
        set. lexer lexer′
        read_arg_list_r(lexer push(exprs expr))

set. read_arg_list λ.{lexer 'Lexer}
    let. mut, lexer lexer
    let. #(lexer′ token _ _ file_pos) read_token(lexer)
    set. lexer lexer′
    match. token
    .LParen() #()
    ._ error(UnexpectedToken(token) file_pos)
    read_arg_list_r(lexer empty)

set. read_arg_list_cr λ.{lexer 'Lexer exprs 'List(R_Expr)}
    let. mut, lexer lexer
    match. read_token(lexer)
    .#(lexer′ Colon() _ _ _)
        #(lexer′ exprs)
    ._
        let. #(lexer′ expr) read_expr(lexer)
        set. lexer lexer′
        read_arg_list_cr(lexer push(exprs expr))

set. read_arg_list_c λ.{lexer 'Lexer}
    let. mut, lexer lexer
    let. #(lexer′ token _ _ file_pos) read_token(lexer)
    set. lexer lexer′
    match. token
    .LParen() #()
    ._ error(UnexpectedToken(token) file_pos)
    read_arg_list_cr(lexer empty)

type. Clause
    ExprClause(R_Expr)
    SecKeywordClause(List(Int))
    ColonClause()
    Label(R_Expr)

type. SpecialExprType
    ParenSE()
    BlockSE()
    InnerSE()

set. read_special_expr_r λ.{lexer 'Lexer kw_indent_depth 'Int kw 'List(Int) clauses 'List(Clause) file_pos 'FilePos se_type 'SpecialExprType}
    let. mut, lexer lexer
    let. #(lexer′ token at_line_start clause_indent_depth token_file_pos) read_token(lexer)
    let. separator_continue ∨(¬(at_line_start) match.(se_type
        .ParenSE() ⊤
        .BlockSE() ≥(clause_indent_depth kw_indent_depth)
        .InnerSE() >(clause_indent_depth kw_indent_depth)
    ))
    let. content_continue ∨(¬(at_line_start) match.(se_type
        .ParenSE() ⊤
        .BlockSE() >(clause_indent_depth kw_indent_depth)
        .InnerSE() >(clause_indent_depth kw_indent_depth)
    ))

    match. token
    .RParen()
        match. se_type
        .ParenSE() set. lexer lexer′
        ._ #()
        #(lexer R_Expr(R_Special(kw clauses) file_pos))
    .Eof()
        match. se_type
        .ParenSE() error(UnexpectedToken(Eof()) token_file_pos)
        ._ #()
        #(lexer R_Expr(R_Special(kw clauses) file_pos))
    .SecKeyword(skw)
        if. separator_continue
            set. lexer lexer′
            read_special_expr_r(lexer kw_indent_depth kw push(clauses SecKeywordClause(skw)) file_pos se_type)
        else,
            #(lexer R_Expr(R_Special(kw clauses) file_pos))
    .Colon()
        if. separator_continue
            set. lexer lexer′
            read_special_expr_r(lexer kw_indent_depth kw push(clauses ColonClause()) file_pos se_type)
        else,
            #(lexer R_Expr(R_Special(kw clauses) file_pos))
    .Period()
        if. separator_continue
            set. lexer lexer′
            let. #(lexer′ expr) read_expr(lexer)
            set. lexer lexer′
            read_special_expr_r(lexer kw_indent_depth kw push(clauses Label(expr)) file_pos se_type)
        else,
            #(lexer R_Expr(R_Special(kw clauses) file_pos))
    ._
        if. content_continue
            let. #(lexer′ expr) read_expr(lexer)
            set. lexer lexer′
            read_special_expr_r(lexer kw_indent_depth kw push(clauses ExprClause(expr)) file_pos se_type)
        else,
            #(lexer R_Expr(R_Special(kw clauses) file_pos))

set. read_paren_special_expr_r λ.{lexer 'Lexer kw_indent_depth 'Int kw 'List(Int) file_pos 'FilePos}
    read_special_expr_r(lexer kw_indent_depth kw empty file_pos ParenSE())

set. read_block_special_expr_r λ.{lexer 'Lexer kw_indent_depth 'Int kw 'List(Int) file_pos 'FilePos}
    read_special_expr_r(lexer kw_indent_depth kw empty file_pos BlockSE())

set. read_inner_special_expr_r λ.{lexer 'Lexer kw_indent_depth 'Int kw 'List(Int) file_pos 'FilePos}
    read_special_expr_r(lexer kw_indent_depth kw empty file_pos InnerSE())
