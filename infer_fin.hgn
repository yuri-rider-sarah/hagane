type. T_FuncParam
    T_FuncParamConst(T_Pattern)
    T_FuncParamMut(T_Type)

type. T_StatementData
    T_ExprStatement(T_Expr)
    T_Let(T_Pattern T_Expr)
    T_Var(T_Expr)
    T_Fun(Int List(*.(List(T_FuncParam) T_Expr)))
    T_TypeStatement(Int List(List(T_Type)))
    T_Extern(List(Int) T_Type)
    T_Set(Int T_Expr)

type. T_Statement T_Statement(T_StatementData FilePos)

type. T_FuncArg
    T_FuncArgConst(T_Expr)
    T_FuncArgMut(Int)

type. T_ExprData
    T_IntLiteral(Int)
    T_Ident(Int List(T_Type))
    T_Tuple(List(T_Expr))
    T_Apply(T_Expr List(T_FuncArg))
    T_If(List(*.(T_Expr T_Expr)) T_Expr)
    T_While(T_Expr T_Expr)
    T_And(List(T_Expr))
    T_Or(List(T_Expr))
    T_Do(List(T_Statement))
    T_Lambda(List(T_FuncParam) T_Expr)
    T_Case(T_Expr List(*.(T_Pattern T_Expr)))
    T_ListLiteral(List(T_Expr) T_Type)

type. T_Expr T_Expr(T_ExprData T_Type FilePos)

type. T_PatternData
    T_IntLiteralPattern(Int)
    T_IdentPattern(T_Type)
    T_WildcardPattern
    T_TuplePattern(List(T_Pattern))
    T_VariantPattern(Int List(T_Pattern) List(T_Type))
    T_ListPattern(List(T_Pattern) T_Type)

type. T_Pattern T_Pattern(T_PatternData T_Type FilePos)

type. T_FuncParamType
    T_FuncParamConstType(T_Type)
    T_FuncParamMutType(T_Type)

type. T_Type
    T_Named(Int List(T_Type))
    T_TupleType(List(T_Type))
    T_Function(List(T_FuncParamType) T_Type)

fun. t_expr_type(∈.(expr T_Expr))
    let. T_Expr(_ type _) expr
    type

fun. t_expr_file_pos(∈.(expr T_Expr))
    let. T_Expr(_ _ file_pos) expr
    file_pos

fun. t_pattern_type(∈.(pattern T_Pattern))
    let. T_Pattern(_ type _) pattern
    type

fun. apply_subs(ens subs)
    map‡ ens λ. en:
        case. get_assoc(subs en =effect_name)
        .Some(en′) en′
        .None en

let. mut, effect_var_name_decomp list¡

fun. decompose_effect_vars()
    set. effect_var_name_decomp map_ι‡ len(effect_vars) λ. i:
        case. get(effect_vars i)
        .EffectUnset(file_pos) error(AmbiguousEffect file_pos)
        .EffectNamed(en) list.(en)
        .EffectSum(_) list¡
        .EffectSubst(_ _) list¡
    let. mut, visited list¡
    let. mut, loop ⊤
    fun. rec(∈.(i Int))
        if. ¬(get(visited i))
            put(~!visited i ⊤)
            case. get(effect_vars i)
            .EffectSum(components)
                let. mut, decomp list¡
                let. mut, blocked list¡
                for‡ components λ. component: case. component
                    .EffectAdd(EffectVar(evi))
                        rec(evi)
                        set. decomp ++(decomp \(\(get(effect_var_name_decomp evi) blocked =effect_name) decomp =effect_name))
                    .EffectBlock(en)
                        push(~!blocked en)
                let. diff \(decomp get(effect_var_name_decomp i) =effect_name)
                if. ≠(len(diff) 0)
                    set. loop ⊤
                    put(~!effect_var_name_decomp i decomp)
                else, *¡
            .EffectSubst(EffectVar(evi) subs)
                rec(evi)
                let. decomp apply_subs(get(effect_var_name_decomp evi) subs)
                let. diff \(decomp get(effect_var_name_decomp i) =effect_name)
                if. ≠(len(diff) 0)
                    set. loop ⊤
                    put(~!effect_var_name_decomp i decomp)
                else, *¡
            ._ *¡
        else, *¡
    while. loop
        set. visited repeat(len(effect_vars) ⊥)
        set. loop ⊥
        for_ι(len(effect_vars) rec)
    for‡ equal_effects λ. *.(EffectVar(evi1) EffectVar(evi2) subs err file_pos):
        if. ¬(=list(apply_subs(get(effect_var_name_decomp evi1) subs) get(effect_var_name_decomp evi2) =effect_name))
            error(err file_pos)
        else, *¡

type. T_Context T_Context‡
    List(Option(Int))
    List(*.(TypeName List(Int) List(List(T_Type))))
    List(EffectName)

let. empty_t_context T_Context‡
    ++(list.(Some(1) Some(0)) repeat(24 None))
    list.
        *.(int_type list¡ list.(list¡))
        *.(bool_type list¡ list.(list¡ list¡))
        *.(list_type list.(3) list.(list¡))
    list¡

fun. t_add_var_binding(∈.(context T_Context) ∈.(var Option(Int)))
    let. T_Context(vars types effects) context
    T_Context(++(vars list.(var)) types effects)

fun. t_add_type_binding(∈.(context T_Context) ∈.(type TypeName) ∈.(type_params List(Int)) ∈.(variants List(List(T_Type))))
    let. T_Context(vars types effects) context
    T_Context(vars ++(types list.(*.(type type_params variants))) effects)

fun. t_add_effect(∈.(context T_Context) ∈.(eff EffectName))
    let. T_Context(vars types effects) context
    T_Context(vars types ++(effects list.(eff)))

fun. check_effect(∈.(ev EffectVar) ∈.(context T_Context) ∈.(file_pos FilePos))
    let. EffectVar(evi) ev
    let. T_Context(_ _ context_effect_names) context
    let. leaked_effects \(get(effect_var_name_decomp evi) context_effect_names =effect_name)
    if. ≠(len(leaked_effects) 0)
        error(LeakedEffect(effect_name_string(get(leaked_effects 0))) file_pos)
    else, *¡

fun. t_locate_type_in_context(∈.(type TypeName) ∈.(context T_Context) ∈.(file_pos FilePos))
    let. T_Context(_ types _) context
    let. mut, index None
    for_ι‡ len(types) λ. i:
        let. *.(type′ _ _) get(types i)
        if. =type_name(type′ type)
            set. index Some(i)
        else, *¡
    case. index
    .Some(index) index
    .None error(LeakedType(type_name_string(type)) file_pos)

fun. i_func_param→t_func_param(∈.(i_param I_FuncParam) ∈.(context T_Context))
    case. i_param
    .I_FuncParamConst(i_pattern)
        let. *.(t_pattern bindings) i_pattern→t_pattern(i_pattern context)
        *.(T_FuncParamConst(t_pattern) bindings)
    .I_FuncParamMut(tv _ file_pos) *.(T_FuncParamMut(type_var→t_type(tv context file_pos)) 1)

fun. i_func_params→t_func_params(∈.(i_params List(I_FuncParam)) ∈.(context T_Context))
    let. *.(t_func_params bindings) unzip(map(i_params λ.(p: i_func_param→t_func_param(p context))))
    *.(t_func_params sum(bindings))

fun. i_func_arg→t_func_arg(∈.(i_arg I_FuncArg) ∈.(context T_Context))
    case. i_arg
    .I_FuncArgConst(i_expr) T_FuncArgConst(i_expr→t_expr(i_expr context))
    .I_FuncArgMut(vi) T_FuncArgMut(vi)

fun. i_exprs→t_exprs(∈.(i_exprs List(I_Expr)) ∈.(context T_Context))
    map(i_exprs λ.(e: i_expr→t_expr(e context)))

fun. i_expr→t_expr(∈.(i_expr I_Expr) ∈.(context T_Context))
    let. I_Expr(i_expr_data i_type effect file_pos) i_expr
    check_effect(effect context file_pos)
    let. t_type type_var→t_type(i_type context file_pos)
    let. t_expr_data case. i_expr_data
        .I_IntLiteral(n) T_IntLiteral(n)
        .I_Ident(vi i_type_args) T_Ident(vi map(i_type_args λ.(t: type_var→t_type(t context file_pos))))
        .I_Tuple(i_exprs) T_Tuple(i_exprs→t_exprs(i_exprs context))
        .I_Apply(i_func i_args) T_Apply(i_expr→t_expr(i_func context) map(i_args λ.(i_arg: i_func_arg→t_func_arg(i_arg context))))
        .I_If(i_cases i_else) T_If(map(i_cases λ.(i_case:
            let. *.(i_cond i_body) i_case
            *.(i_expr→t_expr(i_cond context) i_expr→t_expr(i_body context))
        )) i_expr→t_expr(i_else context))
        .I_While(i_cond i_body) T_While(i_expr→t_expr(i_cond context) i_expr→t_expr(i_body context))
        .I_Do(i_statements) T_Do(i_statements→t_statements(i_statements context))
        .I_Lambda(i_params i_body)
            let. *.(t_params bindings) i_func_params→t_func_params(i_params context)
            let. mut, context′ context
            for_ι‡ bindings λ. _: set. context′ t_add_var_binding(context′ None)
            for‡ i_params λ. param: case. param
                .I_FuncParamConst(_) *¡
                .I_FuncParamMut(_ en _) set. context′ t_add_effect(context′ en)
            T_Lambda(t_params i_expr→t_expr(i_body context′))
        .I_Case(i_expr i_cases)
            let. t_expr i_expr→t_expr(i_expr context)
            let. t_cases map‡ i_cases λ. i_case:
                let. *.(i_pattern i_body) i_case
                let. *.(t_pattern bindings) i_pattern→t_pattern(i_pattern context)
                let. mut, context′ context
                for_ι‡ bindings λ. _: set. context′ t_add_var_binding(context′ None)
                *.(t_pattern i_expr→t_expr(i_body context))
            if. ¬(is_match_exhaustive(map(t_cases λ.(t_case:
                let. *.(t_pattern _) t_case
                list.(t_pattern)
            )) list.(t_expr_type(t_expr)) context))
            then, error(InexhaustivePatterns file_pos)
            else, *¡
            T_Case(t_expr t_cases)
        .I_And(i_exprs) T_And(i_exprs→t_exprs(i_exprs context))
        .I_Or(i_exprs) T_Or(i_exprs→t_exprs(i_exprs context))
        .I_ListLiteral(i_exprs i_elem_type) T_ListLiteral(i_exprs→t_exprs(i_exprs context) type_var→t_type(i_elem_type context file_pos))
    T_Expr(t_expr_data t_type file_pos)

fun. i_statements→t_statements(∈.(i_statements List(I_Statement)) ∈.(context T_Context))
    let. mut, context context
    do.
        let. mut, context′ context
        for‡ i_statements λ. i_statement:
            case. i_statement
            .I_Statement(I_TypeStatement(type _ _) _ _)
                set. context′ t_add_type_binding(context′ type list¡ list.(list¡))
            ._ *¡
        for‡ i_statements λ. i_statement:
            case. i_statement
            .I_Statement(I_TypeStatement(type type_params i_variants) _ file_pos)
                let. mut, context″ context′
                for‡ type_params λ. type:
                    set. context″ t_add_type_binding(context″ type list¡ list.(list¡))
                let. t_variants map(i_variants λ.(type_vars: map(type_vars λ.(tv: type_var→t_type(tv context″ file_pos)))))
                let. T_Context(_ ctx_types _) context′
                let. type_params_base len(ctx_types)
                set. context t_add_type_binding(context type map_ι(len(type_params) λ.(i: +(type_params_base i))) t_variants)
            ._ *¡
    map‡ i_statements λ. i_statement:
        let. I_Statement(i_statement_data effect file_pos) i_statement
        check_effect(effect context file_pos)
        let. t_statement_data case. i_statement_data
            .I_ExprStatement(i_expr) T_ExprStatement(i_expr→t_expr(i_expr context))
            .I_Let(i_pattern i_expr)
                let. *.(t_pattern bindings) i_pattern→t_pattern(i_pattern context)
                let. t_expr i_expr→t_expr(i_expr context)
                if. ¬(is_match_exhaustive(list.(list.(t_pattern)) list.(t_expr_type(t_expr)) context))
                then, error(InexhaustivePatterns file_pos)
                else, *¡
                for_ι‡ bindings λ. _: set. context t_add_var_binding(context None)
                T_Let(t_pattern t_expr)
            .I_Var(i_expr en)
                set. context t_add_var_binding(context None)
                set. context t_add_effect(context en)
                T_Var(i_expr→t_expr(i_expr context))
            .I_TypeStatement(type type_params i_variants)
                let. mut, context′ context
                for‡ type_params λ. type: set.(context′ t_add_type_binding(context′ type list¡ list.(list¡)))
                let. t_variants map‡ ι*(i_variants) λ. *.(i i_param_types):
                    set. context t_add_var_binding(context Some(i))
                    map(i_param_types λ.(i_type: type_var→t_type(i_type context′ file_pos)))
                T_TypeStatement(len(type_params) t_variants)
            .I_Fun(type_params i_defs)
                for‡ i_defs λ. _: set. context t_add_var_binding(context None)
                let. mut, context′ context
                for‡ type_params λ. type: set.(context′ t_add_type_binding(context′ type list¡ list.(list¡)))
                let. t_defs map‡ i_defs λ. *.(i_params i_body):
                    let. *.(t_params bindings) i_func_params→t_func_params(i_params context′)
                    let. mut, context″ context′
                    for_ι‡ bindings λ. _: set. context″ t_add_var_binding(context″ None)
                    for‡ i_params λ. param: case. param
                        .I_FuncParamConst(_) *¡
                        .I_FuncParamMut(_ en _) set. context″ t_add_effect(context″ en)
                    *.(t_params i_expr→t_expr(i_body context″))
                T_Fun(len(type_params) t_defs)
            .I_Extern(name type)
                set. context t_add_var_binding(context None)
                T_Extern(name type_var→t_type(type context file_pos))
            .I_Set(vi i_expr) T_Set(vi i_expr→t_expr(i_expr context))
        T_Statement(t_statement_data file_pos)

fun. i_patterns→t_patterns(∈.(i_patterns List(I_Pattern)) ∈.(context T_Context))
    let. *.(t_patterns bindings) unzip(map(i_patterns λ.(p: i_pattern→t_pattern(p context))))
    *.(t_patterns sum(bindings))

fun. i_pattern→t_pattern(∈.(i_pattern I_Pattern) ∈.(context T_Context))
    let. I_Pattern(i_pattern_data i_type file_pos) i_pattern
    let. t_type type_var→t_type(i_type context file_pos)
    let. *.(t_pattern_data bindings) case. i_pattern_data
        .I_IntLiteralPattern(n) *.(T_IntLiteralPattern(n) 0)
        .I_IdentPattern *.(T_IdentPattern(t_type) 1)
        .I_WildcardPattern *.(T_WildcardPattern 0)
        .I_TuplePattern(i_patterns)
            let. *.(t_patterns bindings) i_patterns→t_patterns(i_patterns context)
            *.(T_TuplePattern(t_patterns) bindings)
        .I_VariantPattern(vi i_args i_type_args)
            let. *.(t_args bindings) i_patterns→t_patterns(i_args context)
            *.(T_VariantPattern(vi t_args map(i_type_args λ.(t: type_var→t_type(t context file_pos)))) bindings)
        .I_ListPattern(i_patterns tv)
            let. *.(t_patterns bindings) i_patterns→t_patterns(i_patterns context)
            *.(T_ListPattern(t_patterns type_var→t_type(tv context file_pos)) bindings)
    *.(T_Pattern(t_pattern_data t_type file_pos) bindings)

fun. i_param_type→t_param_type(∈.(i_param_type I_FuncParamType) ∈.(context T_Context) ∈.(err Error) ∈.(file_pos FilePos))
    case. i_param_type
    .I_FuncParamConstType(tv) T_FuncParamConstType(type_var→t_type′(tv context err file_pos))
    .I_FuncParamMutType(tv _) T_FuncParamMutType(type_var→t_type′(tv context err file_pos))

fun. type_var→t_type′(∈.(tv TypeVar) ∈.(context T_Context) ∈.(err Error) ∈.(file_pos FilePos))
    let. TypeVar(tvi) tv
    case. get(type_variables tvi)
    .I_Any error(err file_pos)
    .I_Equal(tv′) type_var→t_type′(tv′ context err file_pos)
    .I_Named(name type_args) T_Named(t_locate_type_in_context(name context file_pos) map(type_args λ.(tv′: type_var→t_type′(tv′ context err file_pos))))
    .I_TupleType(tvs) T_TupleType(map(tvs λ.(tv′: type_var→t_type′(tv′ context err file_pos))))
    .I_Function(params ret effect)
        let. mut, context′ context
        for‡ params λ. param: case. param
            .I_FuncParamConstType(_) *¡
            .I_FuncParamMutType(_ en) set. context′ t_add_effect(context′ en)
        check_effect(effect context′ file_pos)
        T_Function(map(params λ.(param: i_param_type→t_param_type(param context err file_pos))) type_var→t_type′(ret context err file_pos))

fun. type_var→t_type(∈.(tv TypeVar) ∈.(context T_Context) ∈.(file_pos FilePos))
    type_var→t_type′(tv context AmbiguousType(type_var→partial_type(tv)) file_pos)

fun. t_substitute_in_param_type(∈.(pt T_FuncParamType) ∈.(subs List(*.(Int T_Type))))
    case. pt
    .T_FuncParamConstType(t) T_FuncParamConstType(t_substitute_in_type(t subs))
    .T_FuncParamMutType(t) T_FuncParamMutType(t_substitute_in_type(t subs))

fun. t_substitute_in_type(∈.(type T_Type) ∈.(subs List(*.(Int T_Type))))
    case. type
    .T_Named(ti type_args)
        let. mut, t′ None
        for‡ subs λ. *.(sti st):
            if. =(sti ti)
            then, set. t′ Some(st)
            else, *¡
        case. t′
        .Some(t′) t′
        .None T_Named(ti map(type_args λ.(t: t_substitute_in_type(t subs))))
    .T_TupleType(subtypes) T_TupleType(map(subtypes λ.(t: t_substitute_in_type(t subs))))
    .T_Function(params ret) T_Function(map(params λ.(t: t_substitute_in_param_type(t subs))) t_substitute_in_type(ret subs))

fun. is_match_exhaustive(∈.(pattern_lists List(List(T_Pattern))) ∈.(types List(T_Type)) ∈.(context T_Context))
    if. =(len(types) 0)
    then, ≠(len(pattern_lists) 0)
    else,
        let. pattern_lists′ map_opt‡ pattern_lists λ. ps:
            let. T_Pattern(pd _ _) get(ps 0)
            case. pd
            .T_IdentPattern(_) Some(drop(ps 1))
            .T_WildcardPattern Some(drop(ps 1))
            ._ None
        ∨.(
        ∧.(≠(len(pattern_lists′) 0) is_match_exhaustive(pattern_lists′ drop(types 1) context))
        case. get(types 0)
            .T_Named(ti type_args)
                let. T_Context(ctx_vars ctx_types _) context
                let. *.(_ type_params variants) get(ctx_types ti)
                let. subs case. zip(type_params type_args)
                    .Some(subs) subs
                    .None internal_error("type_args and type_params are not equal length")
                let. variants map‡ variants λ. variant:
                    map(variant λ.(t: t_substitute_in_type(t subs)))
                ∀‡ ι*(variants) λ. *.(vi subtypes):
                    let. pattern_lists′ map_opt‡ pattern_lists λ. ps:
                        let. T_Pattern(pd _ file_pos) get(ps 0)
                        case. pd
                        .T_VariantPattern(ctor_vi subpatterns _) case. get(ctx_vars ctor_vi)
                            .Some(vi′) if. =(vi′ vi)
                                then, Some(++(subpatterns drop(ps 1)))
                                else, None
                            .None
                                internal_error("Not a constructor")
                        .T_IdentPattern(_)
                            Some(++(map(subtypes λ.(t: T_Pattern(T_WildcardPattern t file_pos))) drop(ps 1)))
                        .T_WildcardPattern
                            Some(++(map(subtypes λ.(t: T_Pattern(T_WildcardPattern t file_pos))) drop(ps 1)))
                        ._ None
                    if. ≠(len(pattern_lists′) 0)
                    then, is_match_exhaustive(pattern_lists′ ++(subtypes drop(types 1)) context)
                    else, ⊥
            .T_TupleType(subtypes)
                let. pattern_lists′ map_opt‡ pattern_lists λ. ps:
                    let. T_Pattern(pd _ file_pos) get(ps 0)
                    case. pd
                    .T_TuplePattern(subpatterns)
                        Some(++(subpatterns drop(ps 1)))
                    .T_IdentPattern(_)
                        Some(++(map(subtypes λ.(t: T_Pattern(T_WildcardPattern t file_pos))) drop(ps 1)))
                    .T_WildcardPattern
                        Some(++(map(subtypes λ.(t: T_Pattern(T_WildcardPattern t file_pos))) drop(ps 1)))
                    ._ None
                if. ≠(len(pattern_lists′) 0)
                then, is_match_exhaustive(pattern_lists′ ++(subtypes drop(types 1)) context)
                else, ⊥
            .T_Function(_ _) ⊥
        )
