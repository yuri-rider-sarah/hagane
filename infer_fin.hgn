type. T_StatementData
    T_ExprStatement(T_Expr)
    T_Let(T_Pattern T_Expr)
    T_Let∀(Int List(Int) T_Expr)
    T_LetMut(List(Int) T_Expr)
    T_TypeStatement(Int List(#(List(Int) List(T_Type))))
    T_Extern(List(Int) T_Type)

type. T_Statement T_Statement(T_StatementData FilePos)

type. T_ExprData
    T_IntLiteral(Int)
    T_Ident(List(Int) List(T_Type))
    T_Tuple(List(T_Expr))
    T_Apply(T_Expr List(T_Expr))
    T_Set(List(Int) T_Expr)
    T_If(List(#(T_Expr T_Expr)) T_Expr)
    T_While(T_Expr T_Expr)
    T_Do(List(T_Statement))
    T_Lambda(List(T_Pattern) T_Expr)
    T_Case(T_Expr List(#(T_Pattern T_Expr)))
    T_ListLiteral(List(T_Expr))

type. T_Expr T_Expr(T_ExprData T_Type FilePos)

type. T_PatternData
    T_IntLiteralPattern(Int)
    T_IdentPattern(List(Int))
    T_WildcardPattern()
    T_TuplePattern(List(T_Pattern))
    T_VariantPattern(List(Int) List(T_Pattern) List(T_Type))
    T_ListPattern(List(T_Pattern))

type. T_Pattern T_Pattern(T_PatternData T_Type FilePos)

type. T_Type
    T_Named(Int List(T_Type))
    T_TupleType(List(T_Type))
    T_Function(List(T_Type) T_Type)

let. t_expr_file_pos λ.{expr 'T_Expr}
    let. T_Expr(_ _ file_pos) expr
    file_pos

type. T_Context T_Context(List(TypeName))

let. empty_t_context T_Context(builtin_types)

let. t_add_type_binding λ.{context 'T_Context type 'TypeName}
    let. T_Context(types) context
    T_Context(push(types type))

let. t_locate_type_in_context λ.{type 'TypeName context 'T_Context file_pos 'FilePos}
    let. T_Context(types) context
    let. mut, index None()
    for_ι(len(types) λ.(i 'Int
        if. =type_name(get(types i) type)
            set. index Some(i)
        else, #()
    ))
    match. index
    .Some(index) index
    .None()
        error(LeakedType(type_name_string(type)) file_pos)
        0

let. mut, i_expr→t_expr λ.{i_expr 'I_Expr context 'T_Context} T_Expr(T_IntLiteral(0) T_Named(0 empty) FilePos(" " 0 0))
let. mut, i_statements→t_statements λ.{i_statements 'List(I_Statement) context 'T_Context} empty
let. mut, i_pattern→t_pattern λ.{i_pattern 'I_Pattern context 'T_Context} T_Pattern(T_IntLiteralPattern(0) T_Named(0 empty) FilePos(" " 0 0))
let. mut, type_var→t_type λ.{i_type 'TypeVar context 'T_Context file_pos 'FilePos} T_Named(0 empty)

let. i_exprs→t_exprs λ.{i_exprs 'List(I_Expr) context 'T_Context}
    map(i_exprs λ.(e 'I_Expr i_expr→t_expr(e context)))

set. i_expr→t_expr λ.{i_expr 'I_Expr context 'T_Context}
    let. I_Expr(i_expr_data i_type file_pos) i_expr
    let. t_type type_var→t_type(i_type context file_pos)
    let. t_expr_data match. i_expr_data
        .I_IntLiteral(n) T_IntLiteral(n)
        .I_Ident(name i_type_args) T_Ident(name map(i_type_args λ.(t 'TypeVar type_var→t_type(t context file_pos))))
        .I_Tuple(i_exprs) T_Tuple(i_exprs→t_exprs(i_exprs context))
        .I_Apply(i_func i_args) T_Apply(i_expr→t_expr(i_func context) i_exprs→t_exprs(i_args context))
        .I_Set(name i_expr) T_Set(name i_expr→t_expr(i_expr context))
        .I_If(i_cases i_else) T_If(map(i_cases λ.(i_case '#(I_Expr I_Expr)
            let. #(i_cond i_body) i_case
            #(i_expr→t_expr(i_cond context) i_expr→t_expr(i_body context))
        )) i_expr→t_expr(i_else context))
        .I_While(i_cond i_body) T_While(i_expr→t_expr(i_cond context) i_expr→t_expr(i_body context))
        .I_Do(i_statements) T_Do(i_statements→t_statements(i_statements context))
        .I_Lambda(i_params i_body) T_Lambda(map(i_params λ.(p 'I_Pattern i_pattern→t_pattern(p context))) i_expr→t_expr(i_body context))
        .I_Case(i_expr i_cases) T_Case(i_expr→t_expr(i_expr context) map(i_cases λ.(i_case '#(I_Pattern I_Expr)
            let. #(i_pattern i_body) i_case
            #(i_pattern→t_pattern(i_pattern context) i_expr→t_expr(i_body context))
        )))
        .I_ListLiteral(i_exprs) T_ListLiteral(i_exprs→t_exprs(i_exprs context))
    T_Expr(t_expr_data t_type file_pos)

set. i_statements→t_statements λ.{i_statements 'List(I_Statement) context 'T_Context}
    let. mut, context context
    for(i_statements λ.(i_statement 'I_Statement
        match. i_statement
        .I_Statement(I_TypeStatement(type _ _) _) set. context t_add_type_binding(context type)
        ._ #()
    ))
    let. mut, context context
    map(i_statements λ.(i_statement 'I_Statement
        let. I_Statement(i_statement_data file_pos) i_statement
        let. t_statement_data match.(i_statement_data
        .I_ExprStatement(i_expr) T_ExprStatement(i_expr→t_expr(i_expr context))
        .I_Let(i_pattern i_expr) T_Let(i_pattern→t_pattern(i_pattern context) i_expr→t_expr(i_expr context))
        .I_Let∀(type_params name i_expr)
            let. mut, context′ context
            for(type_params λ.(type 'TypeName set.(context′ t_add_type_binding(context′ type))))
            T_Let∀(len(type_params) name i_expr→t_expr(i_expr context′))
        .I_LetMut(name i_expr) T_LetMut(name i_expr→t_expr(i_expr context))
        .I_TypeStatement(type type_params i_variants)
            let. mut, context′ context
            for(type_params λ.(type 'TypeName set.(context′ t_add_type_binding(context′ type))))
            let. t_variants map(i_variants λ.(i_variant '#(List(Int) List(TypeVar))
                let. #(name i_param_types) i_variant
                #(name map(i_param_types λ.(i_type 'TypeVar type_var→t_type(i_type context′ file_pos))))
            ))
            T_TypeStatement(len(type_params) t_variants)
        .I_Extern(name type) T_Extern(name type_var→t_type(type context file_pos))
        )
        T_Statement(t_statement_data file_pos)
    ))

let. i_patterns→t_patterns λ.{i_patterns 'List(I_Pattern) context 'T_Context}
    map(i_patterns λ.(p 'I_Pattern i_pattern→t_pattern(p context)))

set. i_pattern→t_pattern λ.{i_pattern 'I_Pattern context 'T_Context}
    let. I_Pattern(i_pattern_data i_type file_pos) i_pattern
    let. t_pattern_data match. i_pattern_data
        .I_IntLiteralPattern(n) T_IntLiteralPattern(n)
        .I_IdentPattern(name) T_IdentPattern(name)
        .I_WildcardPattern() T_WildcardPattern()
        .I_TuplePattern(i_patterns) T_TuplePattern(i_patterns→t_patterns(i_patterns context))
        .I_VariantPattern(ctor i_args i_type_args) T_VariantPattern(ctor i_patterns→t_patterns(i_args context) map(i_type_args λ.(t 'TypeVar type_var→t_type(t context file_pos))))
        .I_ListPattern(i_patterns) T_ListPattern(i_patterns→t_patterns(i_patterns context))
    T_Pattern(t_pattern_data type_var→t_type(i_type context file_pos) file_pos)

let. mut, type_var→t_type′ λ.{tv 'TypeVar context 'T_Context err 'Error file_pos 'FilePos} T_Named(0 empty)
set. type_var→t_type′ λ.{tv 'TypeVar context 'T_Context err 'Error file_pos 'FilePos}
    let. TypeVar(tvi) tv
    match. get(type_variables tvi)
    .I_Any()
        error(err file_pos)
        T_Named(0 empty)
    .I_Equal(tv′) type_var→t_type′(tv′ context err file_pos)
    .I_Named(name type_args) T_Named(t_locate_type_in_context(name context file_pos) map(type_args λ.(tv′ 'TypeVar type_var→t_type′(tv′ context err file_pos))))
    .I_TupleType(tvs) T_TupleType(map(tvs λ.(tv′ 'TypeVar type_var→t_type′(tv′ context err file_pos))))
    .I_Function(params ret) T_Function(map(params λ.(param 'TypeVar type_var→t_type′(param context err file_pos))) type_var→t_type′(ret context err file_pos))

set. type_var→t_type λ.{tv 'TypeVar context 'T_Context file_pos 'FilePos}
    type_var→t_type′(tv context AmbiguousType(type_var→partial_type(tv)) file_pos)
