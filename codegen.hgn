extern. get_insert_block ‡(: Int)
extern. set_insert_block ‡(Int : #())
extern. create_block ‡(: Int)
extern. begin_new_function ‡(Int : Int)
extern. codegen_rc_incr ‡(Int : #())
extern. codegen_rc_decr ‡(Int : #())
extern. codegen_const_bool ‡(Int : Int)
extern. codegen_const_int ‡(Int : Int)
extern. codegen_tuple ‡(Int : Int)
extern. codegen_list ‡(Int : Int)
extern. codegen_cell_rc_incr ‡(Int : #())
extern. codegen_cell_rc_decr ‡(Int : #())
extern. codegen_create_mut_var ‡(Int : Int)
extern. codegen_load_mut_var ‡(Int : Int)
extern. codegen_store_mut_var ‡(Int Int : #())
extern. codegen_unreachable ‡(: #())
extern. codegen_br ‡(Int : #())
extern. codegen_cond_br ‡(Int Int Int : #())
extern. codegen_phi ‡(Int : Int)
extern. phi_add_incoming ‡(Int Int Int : #())
extern. codegen_apply ‡(Int Int : Int)
extern. codegen_get_arg ‡(Int : Int)
extern. get_captures_type ‡(Int Int : Int)
extern. codegen_get_captures ‡(Int : Int)
extern. codegen_extract_capture ‡(Int Int : Int)
extern. codegen_ret ‡(Int : #())
extern. codegen_func_val ‡(Int Int Int : Int)
extern. codegen_create_tagless_ctor ‡(Int : Int)
extern. codegen_create_tagged_ctor ‡(Int Int : Int)
extern. bind_pattern_end ‡(Int Int : #())
extern. codegen_int_pattern_test ‡(Int Int : Int)
extern. codegen_tuple_cast ‡(Int Int : Int)
extern. codegen_tagged_cast ‡(Int Int : Int)
extern. codegen_tag_check ‡(Int Int : Int)
extern. codegen_tuple_get ‡(Int Int : Int)
extern. codegen_list_cast ‡(Int : Int)
extern. codegen_len_check ‡(Int Int : Int)
extern. codegen_list_get ‡(Int Int : Int)
extern. codegen_extern ‡(Int Int Int : Int)
extern. codegen_arith_primitive ‡(Int : Int)
extern. codegen_div_primitive ‡(Int : Int)
extern. codegen_cmp_primitive ‡(Int : Int)
extern. codegen_len_primitive ‡(: Int)
extern. codegen_get_primitive ‡(: Int)
extern. codegen_put_primitive ‡(: Int)
extern. codegen_push_primitive ‡(: Int)
extern. codegen_pop_primitive ‡(: Int)

let. begin_new_block λ.{}
    let. bb create_block()
    set_insert_block(bb)
    bb

type. C_Variable
    C_ConstVar(Int)
    C_MutVar(Int)
    C_Ctor(Int Option(Int))

type. C_Context C_Context(
    List(#(List(Int) C_Variable)) ※ vars
)

let. c_add_let_binding λ.{context 'C_Context name 'List(Int) var 'C_Variable}
    let. C_Context(vars) context
    C_Context(push[#(List(Int) C_Variable)](vars #(name var)))

let. c_lookup_var λ.{name 'List(Int) context 'C_Context}
    let. mut, r None[C_Variable]()
    let. C_Context(vars _) context
    for[#(List(Int) C_Variable)](vars λ.(var '#(List(Int) C_Variable)
        let. #(name′ val) var
        if. =list[Int](name′ name =)
        then, set. r Some[C_Variable](val)
        else, #()
    ))
    match. r
    .Some(val) val
    .None()
        unreachable("Variable not found in context")
        C_ConstVar(0)

let. get_empty_c_context λ.{}
    C_Context(
        list.(
        #("⊤" C_ConstVar(codegen_const_bool(1)))
        #("⊥" C_ConstVar(codegen_const_bool(0)))
        #("+" C_ConstVar(codegen_arith_primitive(0)))
        #("-" C_ConstVar(codegen_arith_primitive(1)))
        #("*" C_ConstVar(codegen_arith_primitive(2)))
        #("/" C_ConstVar(codegen_div_primitive(0)))
        #("%" C_ConstVar(codegen_div_primitive(1)))
        #("=" C_ConstVar(codegen_cmp_primitive(0)))
        #("≠" C_ConstVar(codegen_cmp_primitive(1)))
        #("<" C_ConstVar(codegen_cmp_primitive(2)))
        #("≤" C_ConstVar(codegen_cmp_primitive(3)))
        #(">" C_ConstVar(codegen_cmp_primitive(4)))
        #("≥" C_ConstVar(codegen_cmp_primitive(5)))
        #("empty" C_ConstVar(codegen_list(list→vector(empty[Int]))))
        #("len" C_ConstVar(codegen_len_primitive()))
        #("get" C_ConstVar(codegen_get_primitive()))
        #("put" C_ConstVar(codegen_put_primitive()))
        #("push" C_ConstVar(codegen_push_primitive()))
        #("pop" C_ConstVar(codegen_pop_primitive()))
        )
    )

let. mut, codegen_expr λ.{expr 'T_Expr context 'C_Context} 0
let. mut, codegen_statements λ.{statements 'List(T_Statement) context 'C_Context} 0
let. mut, codegen_pattern_test λ.{val 'Int pattern 'T_Pattern context 'C_Context} #(empty[#(List(Int) C_Variable)] empty[Int])

set. codegen_expr λ.{expr 'T_Expr context 'C_Context}
    let. T_Expr(expr_data expr_type file_pos) expr
    match. expr_data
    .T_IntLiteral(n) codegen_const_int(n)
    .T_Ident(name _)
        match. c_lookup_var(name context)
        .C_ConstVar(val) val
        .C_MutVar(var) codegen_load_mut_var(var)
        .C_Ctor(ctor _) ctor
    .T_Tuple(exprs)
        codegen_tuple(list→vector(map[T_Expr Int](exprs λ.(e 'T_Expr codegen_expr(e context)))))
    .T_Apply(func args)
        codegen_apply(codegen_expr(func context) list→vector(map[T_Expr Int](args λ.(e 'T_Expr codegen_expr(e context)))))
    .T_Set(name expr)
        match. c_lookup_var(name context)
        .C_MutVar(var) codegen_store_mut_var(var codegen_expr(expr context))
        ._ error(AssignToConst(name) file_pos)
        codegen_tuple(list→vector(empty[Int]))
    .T_If(cond then else)
        let. cond_val codegen_expr(cond context)
        let. cond_val_block get_insert_block()
        let. then_block begin_new_block()
        let. then_val codegen_expr(then context)
        let. then_val_block get_insert_block()
        let. else_block begin_new_block()
        let. else_val codegen_expr(else context)
        let. else_val_block get_insert_block()
        let. merge_block begin_new_block()
        set_insert_block(cond_val_block)
        codegen_cond_br(cond_val then_block else_block)
        set_insert_block(then_val_block)
        codegen_br(merge_block)
        set_insert_block(else_val_block)
        codegen_br(merge_block)
        set_insert_block(merge_block)
        let. phi codegen_phi(2)
        phi_add_incoming(phi then_val then_val_block)
        phi_add_incoming(phi else_val else_val_block)
        phi
    .T_While(cond body)
        let. cond_block create_block()
        codegen_br(cond_block)
        set_insert_block(cond_block)
        let. cond_val codegen_expr(cond context)
        let. cond_val_block get_insert_block()
        let. body_block begin_new_block()
        codegen_expr(body context)
        codegen_br(cond_block)
        let. merge_block create_block()
        set_insert_block(cond_val_block)
        codegen_cond_br(cond_val body_block merge_block)
        set_insert_block(merge_block)
        codegen_tuple(list→vector(empty[Int]))
    .T_Do(statements) codegen_statements(statements context)
    .T_Lambda(params body)
        let. parent_block get_insert_block()
        let. C_Context(vars) context
        let. outer_captures list→vector(map[#(List(Int) C_Variable) Int](vars λ.(binding '#(List(Int) C_Variable)
            let. #(_ var) binding
            match. var
            .C_ConstVar(val) val
            .C_MutVar(ptr) ptr
            .C_Ctor(ctor _) ctor
        )))
        let. captures_type get_captures_type(len[T_Pattern](params) outer_captures)
        let. func begin_new_function(len[T_Pattern](params))
        let. inner_captures codegen_get_captures(captures_type)
        let. context′ C_Context(++[#(List(Int) C_Variable)](
            map_ι[#(List(Int) C_Variable)](len[#(List(Int) C_Variable)](vars) λ.(i 'Int
                let. cap codegen_extract_capture(inner_captures i)
                let. #(name var) get[#(List(Int) C_Variable)](vars i)
                let. var′ match. var
                    .C_ConstVar(_) C_ConstVar(cap)
                    .C_MutVar(_) C_MutVar(cap)
                    .C_Ctor(_ tag) C_Ctor(cap tag)
                #(name var′)
            ))
            concat[#(List(Int) C_Variable)](map_ι[List(#(List(Int) C_Variable))](len[T_Pattern](params) λ.(i 'Int
                let. #(bindings pattern_ends) codegen_pattern_test(codegen_get_arg(i) get[T_Pattern](params i) context)
                if. ≠(len[Int](pattern_ends) 0)
                    unreachable("pattern_ends not empty")
                else, #()
                bindings
            )))
        ))
        let. ret_val codegen_expr(body context′)
        codegen_ret(ret_val)
        set_insert_block(parent_block)
        codegen_func_val(func outer_captures captures_type)
    .T_Cond(cases)
        let. branches map[#(T_Expr T_Expr) #(Int Int)](cases λ.(case '#(T_Expr T_Expr)
            let. #(cond body) case
            let. cond_val codegen_expr(cond context)
            let. cond_val_block get_insert_block()
            let. body_block begin_new_block()
            let. body_val codegen_expr(body context)
            let. body_end get_insert_block()
            let. next_block create_block()
            set_insert_block(cond_val_block)
            codegen_cond_br(cond_val body_block next_block)
            set_insert_block(next_block)
            #(body_val body_end)
        ))
        codegen_unreachable()
        let. merge_block begin_new_block()
        let. phi codegen_phi(len[#(Int Int)](branches))
        for[#(Int Int)](branches λ.(branch '#(Int Int)
            let. #(body_val body_end) branch
            set_insert_block(body_end)
            codegen_br(merge_block)
            phi_add_incoming(phi body_val body_end)
        ))
        set_insert_block(merge_block)
        phi
    .T_Match(expr cases)
        let. matched_val codegen_expr(expr context)
        let. branches map[#(T_Pattern T_Expr) #(Int Int)](cases λ.(case '#(T_Pattern T_Expr)
            let. #(pattern body) case
            let. #(bindings pattern_ends) codegen_pattern_test(matched_val pattern context)
            let. mut, context′ context
            for[#(List(Int) C_Variable)](bindings λ.(bind '#(List(Int) C_Variable)
                let. #(name var) bind
                set. context′ c_add_let_binding(context′ name var)
            ))
            let. body_val codegen_expr(body context′)
            let. body_end get_insert_block()
            let. next_block create_block()
            for[Int](pattern_ends λ.(pattern_end 'Int
                bind_pattern_end(pattern_end next_block)
            ))
            set_insert_block(next_block)
            #(body_val body_end)
        ))
        codegen_unreachable()
        let. merge_block begin_new_block()
        let. phi codegen_phi(len[#(Int Int)](branches))
        for[#(Int Int)](branches λ.(branch '#(Int Int)
            let. #(body_val body_end) branch
            set_insert_block(body_end)
            codegen_br(merge_block)
            phi_add_incoming(phi body_val body_end)
        ))
        set_insert_block(merge_block)
        phi
    .T_ListLiteral(exprs)
        codegen_list(list→vector(map[T_Expr Int](exprs λ.(e 'T_Expr codegen_expr(e context)))))
    ._
        unreachable("unimplemented (codegen_expr)")
        0

set. codegen_statements λ.{statements 'List(T_Statement) context 'C_Context}
    let. mut, context context
    let. mut, block_val None[Int]()
    for[T_Statement](statements λ.(statement 'T_Statement
        match. statement
        .T_ExprStatement(expr)
            set. block_val Some[Int](codegen_expr(expr context))
            #()
        .T_Let(pattern expr)
            let. #(bindings pattern_ends) codegen_pattern_test(codegen_expr(expr context) pattern context)
            if. ≠(len[Int](pattern_ends) 0)
                unreachable("pattern_ends not empty")
            else, #()
            for[#(List(Int) C_Variable)](bindings λ.(bind '#(List(Int) C_Variable)
                let. #(name var) bind
                set. context c_add_let_binding(context name var)
            ))
        .T_Let∀(_ name expr)
            set. context c_add_let_binding(context name C_ConstVar(codegen_expr(expr context)))
        .T_LetMut(name expr)
            set. context c_add_let_binding(context name C_MutVar(codegen_create_mut_var(codegen_expr(expr context))))
        .T_TypeStatement(num_params variants)
            if. =(len[#(List(Int) List(T_Type))](variants) 1)
                let. #(name params) get[#(List(Int) List(T_Type))](variants 0)
                set. context c_add_let_binding(context name C_Ctor(codegen_create_tagless_ctor(len[T_Type](params)) None[Int]()))
            else,
                for_ι(len[#(List(Int) List(T_Type))](variants) λ.(i 'Int
                    let. #(name params) get[#(List(Int) List(T_Type))](variants i)
                    set. context c_add_let_binding(context name C_Ctor(codegen_create_tagged_ctor(len[T_Type](params) i) Some[Int](i)))
                ))
        .T_Extern(name type)
            let. file_pos FilePos("[extern.]" 0 0)
            match. type
            .T_Function(params ret)
                let. TypeName(int_type_index) int_type
                for[T_Type](params λ.(param 'T_Type
                    match. param
                    .T_Named(i)
                        if. ≠(i int_type_index)
                            error(InvalidExternType(name) file_pos)
                        else, #()
                    ._
                        error(InvalidExternType(name) file_pos)
                ))
                let. ret_int match. ret
                    .T_Named(i)
                        if. ≠(i int_type_index)
                            error(InvalidExternType(name) file_pos)
                        else, #()
                        ⊤
                    .T_TupleType(list.()) ⊥
                    ._
                        error(InvalidExternType(name) file_pos)
                        ⊥
                set. context c_add_let_binding(context name C_ConstVar(codegen_extern(utf8_encode(list→vector(name)) len[T_Type](params) if.(ret_int 1 0))))
            ._
                error(InvalidExternType(name) file_pos)
        ._
            unreachable("unimplemented (codegen_statements)")
            #()
    ))
    match. block_val
    .Some(block_val) block_val
    .None() codegen_tuple(list→vector(empty[Int]))

set. codegen_pattern_test λ.{val 'Int pattern 'T_Pattern context 'C_Context}
    let. T_Pattern(pattern_data _ file_pos) pattern
    match. pattern_data
    .T_IntLiteralPattern(n) #(empty[#(List(Int) C_Variable)] list.(codegen_int_pattern_test(val n)))
    .T_IdentPattern(name) #(list.(#(name C_ConstVar(val))) empty[Int])
    .T_WildcardPattern() #(empty[#(List(Int) C_Variable)] empty[Int])
    .T_TuplePattern(patterns)
        let. tuple codegen_tuple_cast(val len[T_Pattern](patterns))
        let. #(bindings_ ends_) unzip[List(#(List(Int) C_Variable)) List(Int)](map_ι[#(List(#(List(Int) C_Variable)) List(Int))](len[T_Pattern](patterns) λ.(i 'Int
            codegen_pattern_test(codegen_tuple_get(tuple i) get[T_Pattern](patterns i) context)
        )))
        #(concat[#(List(Int) C_Variable)](bindings_) concat[Int](ends_))
    .T_VariantPattern(ctor patterns _)
        let. tag match. c_lookup_var(ctor context)
            .C_Ctor(_ tag) tag
            ._
                error(NotACtor(ctor) file_pos)
                None[Int]()
        match. tag
        .Some(tag)
            let. tagged codegen_tagged_cast(val len[T_Pattern](patterns))
            let. tag_fail codegen_tag_check(tagged tag)
            let. #(bindings_ ends_) unzip[List(#(List(Int) C_Variable)) List(Int)](map_ι[#(List(#(List(Int) C_Variable)) List(Int))](len[T_Pattern](patterns) λ.(i 'Int
                codegen_pattern_test(codegen_tuple_get(tagged i) get[T_Pattern](patterns i) context)
            )))
            #(concat[#(List(Int) C_Variable)](bindings_) push[Int](concat[Int](ends_) tag_fail))
        .None()
            let. tuple codegen_tuple_cast(val len[T_Pattern](patterns))
            let. #(bindings_ ends_) unzip[List(#(List(Int) C_Variable)) List(Int)](map_ι[#(List(#(List(Int) C_Variable)) List(Int))](len[T_Pattern](patterns) λ.(i 'Int
                codegen_pattern_test(codegen_tuple_get(tuple i) get[T_Pattern](patterns i) context)
            )))
            #(concat[#(List(Int) C_Variable)](bindings_) concat[Int](ends_))
    .T_ListPattern(patterns)
        let. list codegen_list_cast(val)
        let. len_fail codegen_len_check(list len[T_Pattern](patterns))
        let. #(bindings_ ends_) unzip[List(#(List(Int) C_Variable)) List(Int)](map_ι[#(List(#(List(Int) C_Variable)) List(Int))](len[T_Pattern](patterns) λ.(i 'Int
            codegen_pattern_test(codegen_list_get(list i) get[T_Pattern](patterns i) context)
        )))
        #(concat[#(List(Int) C_Variable)](bindings_) push[Int](concat[Int](ends_) len_fail))
