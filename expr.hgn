type. U_Statement
    U_ExprStatement(U_Expr)
    U_Let(U_Pattern U_Expr)
    U_Let∀(List(List(Int)) U_Pattern U_Expr)
    U_LetMut(List(Int) U_Expr)
    U_TypeStatement(List(Int) List(List(Int)) List(#(List(Int) List(U_Type))))
    U_Extern(List(Int) U_Type)

type. U_ExprData
    U_IntLiteral(Int)
    U_Ident(List(Int))
    U_Wildcard()
    U_Tuple(List(U_Expr))
    U_FunctionExpr(List(U_Expr) U_Expr)
    U_Apply(U_Expr List(U_Expr))
    U_Typed(U_Expr U_Type)
    U_Set(List(Int) U_Expr)
    U_If(U_Expr U_Expr U_Expr)
    U_While(U_Expr U_Expr)
    U_Do(List(U_Statement))
    U_Lambda(List(U_Pattern) U_Expr)
    U_Cond(List(#(U_Expr U_Expr)))
    U_Match(U_Expr List(#(U_Pattern U_Expr)))
    U_ListLiteral(List(U_Expr))

type. U_Expr U_Expr(U_ExprData FilePos)

type. U_Type
    U_Named(List(Int))
    U_Applied(List(Int) List(U_Type))
    U_TupleType(List(U_Type))
    U_Function(List(U_Type) U_Type)

let. mut, r_expr→u_type λ.{expr 'R_Expr} U_TupleType(empty[U_Type])
set. r_expr→u_type λ.{expr 'R_Expr}
    let. R_Expr(expr_data file_pos) expr
    match. expr_data
    .R_Ident(name) U_Named(name)
    .R_Apply(R_Expr(R_Ident(base) _) params) U_Applied(base map[R_Expr U_Type](params r_expr→u_type))
    .R_Tuple(types) U_TupleType(map[R_Expr U_Type](types r_expr→u_type))
    .R_FunctionExpr(params result) U_Function(map[R_Expr U_Type](params r_expr→u_type) r_expr→u_type(result))
    ._
        error(InvalidType() file_pos)
        U_Named(empty[Int])

type. U_PatternData
    U_IntLiteralPattern(Int)
    U_IdentPattern(List(Int))
    U_WildcardPattern()
    U_TuplePattern(List(U_Pattern))
    U_VariantPattern(List(Int) List(U_Pattern))
    U_ListPattern(List(U_Pattern))
    U_TypedPattern(U_Pattern U_Type)

type. U_Pattern U_Pattern(U_PatternData FilePos)

let. dummy_expr U_Expr(U_Wildcard() FilePos(empty[Int] 0 0))
let. dummy_u_pattern U_Pattern(U_WildcardPattern() FilePos(empty[Int] 0 0))

let. mut, r_expr→u_pattern λ.{expr 'R_Expr} dummy_u_pattern
set. r_expr→u_pattern λ.{expr 'R_Expr}
    let. R_Expr(expr_data file_pos) expr
    let. pattern_data match. expr_data
        .R_IntLiteral(n) U_IntLiteralPattern(n)
        .R_CharLiteral(c) U_IntLiteralPattern(c)
        .R_StringLiteral(s) U_ListPattern(map[Int U_Pattern](s λ.(c 'Int U_Pattern(U_IntLiteralPattern(c) file_pos))))
        .R_Ident(name) U_IdentPattern(name)
        .R_Wildcard() U_WildcardPattern()
        .R_Tuple(exprs) U_TuplePattern(map[R_Expr U_Pattern](exprs r_expr→u_pattern))
        .R_Apply(R_Expr(R_Ident(ctor)) args) U_VariantPattern(ctor map[R_Expr U_Pattern](args r_expr→u_pattern))
        .R_Typed(expr type) U_TypedPattern(r_expr→u_pattern(expr) r_expr→u_type(type))
        .R_Special("list" clauses) U_ListPattern(map[Clause U_Pattern](clauses λ.(clause 'Clause
            match. clause
            .Block(list.(expr)) r_expr→u_pattern(expr)
            ._
                error(InvalidPattern() file_pos)
                dummy_u_pattern
        )))
        ._
            error(InvalidPattern() file_pos)
            U_WildcardPattern()
    U_Pattern(pattern_data file_pos)

let. mut, clauses→expr_data λ.{kw 'List(Int) clauses 'List(Clause) file_pos 'FilePos} U_Wildcard()
let. mut, clauses→u_statement λ.{kw 'List(Int) clauses 'List(Clause) file_pos 'FilePos} U_ExprStatement(dummy_expr)
let. mut, r_expr→u_expr λ.{r_expr 'R_Expr} dummy_expr
let. mut, r_expr→u_expr λ.{r_expr 'R_Expr} dummy_expr
let. mut, r_expr→u_statement λ.{r_expr 'R_Expr} U_ExprStatement(dummy_expr)

let. r_expr→string λ.{expr 'R_Expr kw 'List(Int) file_pos 'FilePos}
    match. expr
    .R_Expr(R_Ident(s) _) s
    ._
        error(InvalidExpr(kw) file_pos)
        empty[Int]

let. block→u_expr λ.{exprs 'List(R_Expr) file_pos 'FilePos}
    U_Expr(U_Do(map[R_Expr U_Statement](exprs r_expr→u_statement)) file_pos)

set. clauses→expr_data λ.{kw 'List(Int) clauses 'List(Clause) file_pos 'FilePos}
    let. r_expr→string λ.{expr 'R_Expr} r_expr→string(expr kw file_pos)
    let. block→u_expr λ.{exprs 'List(R_Expr)} block→u_expr(exprs file_pos)

    let. clause→u_expr λ.{clause 'Clause}
        match. clause
        .Block(exprs) block→u_expr(exprs)
        ._
            error(InvalidExpr(kw) file_pos)
            dummy_expr

    match. #(kw clauses)
    .#("set" list.(Block(list.(R_Expr(R_Ident(var) _))) Block(val)))
        U_Set(var block→u_expr(val))
    .#("do" list.(Block(exprs)))
        U_Do(map[R_Expr U_Statement](exprs r_expr→u_statement))
    .#("if" list.(Block(cond) Block(then) Block(else)))
        U_If(block→u_expr(cond) block→u_expr(then) block→u_expr(else))
    .#("if" list.(Block(cond) SecKeywordClause("then") Block(then) Block(else)))
        U_If(block→u_expr(cond) block→u_expr(then) block→u_expr(else))
    .#("if" list.(Block(cond) Block(then) SecKeywordClause("else") Block(else)))
        U_If(block→u_expr(cond) block→u_expr(then) block→u_expr(else))
    .#("if" list.(Block(cond) SecKeywordClause("then") Block(then) SecKeywordClause("else") Block(else)))
        U_If(block→u_expr(cond) block→u_expr(then) block→u_expr(else))
    .#("while" list.(Block(cond) Block(body)))
        U_While(block→u_expr(cond) block→u_expr(body))
    .#("while" list.(Block(cond) SecKeywordClause("do") Block(body)))
        U_While(block→u_expr(cond) block→u_expr(body))
    .#("λ" list.(Block(args) Block(body)))
        U_Lambda(map[R_Expr U_Pattern](args r_expr→u_pattern) block→u_expr(body))
    .#("λ" list.(Block(args) SecKeywordClause("⇒") Block(body)))
        U_Lambda(map[R_Expr U_Pattern](args r_expr→u_pattern) block→u_expr(body))
    .#("cond" _)
        if. ≠(%(len[Clause](clauses) 2) 0)
            error(InvalidExpr(kw) file_pos)
        else, #()
        let. cases map_ι[#(U_Expr U_Expr)](/(len[Clause](clauses) 2) λ.(i 'Int
            match. #(get[Clause](clauses *(2 i)) get[Clause](clauses +(*(2 i) 1)))
            .#(Label(cond) Block(body)) #(r_expr→u_expr(cond) block→u_expr(body))
            ._
                error(InvalidExpr(kw) file_pos)
                #(dummy_expr dummy_expr)
        ))
        U_Cond(cases)
    .#("match" _)
        if. ≠(%(len[Clause](clauses) 2) 1)
            error(InvalidExpr(kw) file_pos)
        else, #()
        let. val clause→u_expr(get[Clause](clauses 0))
        let. cases map_ι[#(U_Pattern U_Expr)](/(len[Clause](clauses) 2) λ.(i 'Int
            match. #(get[Clause](clauses +(*(2 i) 1)) get[Clause](clauses +(*(2 i) 2)))
            .#(Label(pattern_expr) Block(body)) #(r_expr→u_pattern(pattern_expr) block→u_expr(body))
            ._
                error(InvalidExpr(kw) file_pos)
                #(dummy_u_pattern dummy_expr)
        ))
        U_Match(val cases)
    .#("list" _)
        U_ListLiteral(map[Clause U_Expr](clauses clause→u_expr))
    ._
        error(InvalidExpr(kw) file_pos)
        U_Wildcard()

set. clauses→u_statement λ.{kw 'List(Int) clauses 'List(Clause) file_pos 'FilePos}
    let. r_expr→string λ.{expr 'R_Expr} r_expr→string(expr kw file_pos)
    let. block→u_expr λ.{exprs 'List(R_Expr)} block→u_expr(exprs file_pos)
    match. #(kw clauses)
    .#("let" list.(Block(list.(var)) Block(val)))
        U_Let(r_expr→u_pattern(var) block→u_expr(val))
    .#("let" list.(SecKeywordClause("∀") Block(type_param_exprs) Block(list.(var)) Block(val)))
        U_Let∀(map[R_Expr List(Int)](type_param_exprs r_expr→string) r_expr→u_pattern(var) block→u_expr(val))
    .#("let" list.(SecKeywordClause("mut") Block(list.(R_Expr(R_Ident(var) _))) Block(val)))
        U_LetMut(var block→u_expr(val))
    .#("type" list.(Block(list.(R_Expr(R_Ident(name) _))) Block(variant_exprs)))
        let. variants map[R_Expr #(List(Int) List(U_Type))](variant_exprs λ.(expr 'R_Expr
            match. expr
            .R_Expr(R_Apply(R_Expr(R_Ident(variant_name) _) params) _)
                #(variant_name map[R_Expr U_Type](params r_expr→u_type))
            ._
                error(InvalidExpr(kw) file_pos)
                #(empty[Int] empty[U_Type])
        ))
        U_TypeStatement(name empty[List(Int)] variants)
    .#("type" list.(SecKeywordClause("∀") Block(type_param_exprs) Block(list.(R_Expr(R_Ident(name) _))) Block(variant_exprs)))
        let. type_params map[R_Expr List(Int)](type_param_exprs r_expr→string)
        let. variants map[R_Expr #(List(Int) List(U_Type))](variant_exprs λ.(expr 'R_Expr
            match. expr
            .R_Expr(R_Apply(R_Expr(R_Ident(variant_name) _) params) _)
                #(variant_name map[R_Expr U_Type](params r_expr→u_type))
            ._
                error(InvalidExpr(kw) file_pos)
                #(empty[Int] empty[U_Type])
        ))
        U_TypeStatement(name type_params variants)
    .#("extern" list.(Block(list.(R_Expr(R_Ident(name) _))) Block(list.(type_expr))))
        U_Extern(name r_expr→u_type(type_expr))
    ._ U_ExprStatement(U_Expr(clauses→expr_data(kw clauses file_pos) file_pos))

set. r_expr→u_expr λ.{r_expr 'R_Expr}
    let. R_Expr(r_expr_data file_pos) r_expr
    let. expr_data match. r_expr_data
        .R_IntLiteral(n) U_IntLiteral(n)
        .R_CharLiteral(c) U_IntLiteral(c)
        .R_StringLiteral(s) U_ListLiteral(map[Int U_Expr](s λ.(c 'Int U_Expr(U_IntLiteral(c) file_pos))))
        .R_Ident(s) U_Ident(s)
        .R_Wildcard() U_Wildcard()
        .R_Tuple(exprs) U_Tuple(map[R_Expr U_Expr](exprs r_expr→u_expr))
        .R_FunctionExpr(params ret) U_FunctionExpr(map[R_Expr U_Expr](params r_expr→u_expr) r_expr→u_expr(ret))
        .R_Typed(expr type) U_Typed(r_expr→u_expr(expr) r_expr→u_type(type))
        .R_Apply(func args) U_Apply(r_expr→u_expr(func) map[R_Expr U_Expr](args r_expr→u_expr))
        .R_Special(kw clauses) clauses→expr_data(kw clauses file_pos)
    U_Expr(expr_data file_pos)

set. r_expr→u_statement λ.{r_expr 'R_Expr}
    let. R_Expr(r_expr_data file_pos) r_expr
    match. r_expr_data
    .R_Special(kw clauses) clauses→u_statement(kw clauses file_pos)
    ._ U_ExprStatement(r_expr→u_expr(r_expr))
