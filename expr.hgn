type. U_FuncParam
    U_FuncParamConst(U_Pattern)
    U_FuncParamMut(List(Int) FilePos)

type. U_StatementData
    U_ExprStatement(U_Expr)
    U_Let(U_Pattern U_Expr)
    U_Var(List(Int) U_Expr Option(List(Int)))
    U_Fun(List(*.(List(Int) Option(List(List(Int))) Option(List(List(Int))) List(U_FuncParam) Option(U_Type) Option(List(U_Effect)) U_Expr)))
    U_TypeStatement(List(Int) List(List(Int)) List(*.(List(Int) List(U_Type))))
    U_Extern(List(Int) U_Type)
    U_Set(List(Int) U_Expr)
    U_EffectStatement(List(Int))

type. U_Statement U_Statement(U_StatementData FilePos)

type. U_FuncArg
    U_FuncArgConst(U_Expr)
    U_FuncArgMut(List(Int) FilePos)

type. U_ExprData
    U_IntLiteral(Int)
    U_Ident(List(Int))
    U_Tuple(List(U_Expr))
    U_Apply(U_Expr List(U_FuncArg))
    U_Typed(U_Expr U_Type)
    U_If(List(*.(U_Expr U_Expr)) U_Expr)
    U_While(U_Expr U_Expr)
    U_And(List(U_Expr))
    U_Or(List(U_Expr))
    U_Do(List(U_Statement))
    U_Lambda(List(U_FuncParam) U_Expr)
    U_Case(U_Expr List(*.(U_Pattern U_Expr)))
    U_ListLiteral(List(U_Expr))
    U_StringLiteral(List(Int)) ※ This must be separate from U_ListLiteral at this stage, so that "" can later be assigned type List(Int)

type. U_Expr U_Expr(U_ExprData FilePos)

type. U_FuncParamType
    U_FuncParamConstType(U_Type)
    U_FuncParamMutType(U_Type)

type. U_TypeData
    U_Named(List(Int) List(U_Type))
    U_TupleType(List(U_Type))
    U_Function(List(U_FuncParamType) U_Type Option(List(U_Effect)))

type. U_Type U_Type(U_TypeData FilePos)

type. U_EffectData
    U_NamedEffect(List(Int))
    U_VarEffect(List(Int))

type. U_Effect U_Effect(U_EffectData FilePos)

type. U_PatternData
    U_IntLiteralPattern(Int)
    U_IdentPattern(List(Int))
    U_WildcardPattern
    U_TuplePattern(List(U_Pattern))
    U_VariantPattern(List(Int) List(U_Pattern))
    U_ListPattern(List(U_Pattern))
    U_TypedPattern(U_Pattern U_Type)

type. U_Pattern U_Pattern(U_PatternData FilePos)

type. ClauseSeparator
    NamedSep(List(Int))
    ColonSep
    LabelSep(R_Expr)

type. ClauseGroup ClauseGroup(ClauseSeparator List(R_Expr))

type. ClauseGrouping ClauseGrouping(List(R_Expr) List(ClauseGroup))

fun. group_clauses_loop(∈.(clauses List(Clause)) ∈.(i Int) ∈.(init_group List(R_Expr)) ~!groups ∈.(this_sep ClauseSeparator) ~!this_group)
    if. <(i len(clauses))
        case. get(clauses i)
        .ExprClause(expr)
            push(~!this_group expr)
            group_clauses_loop(clauses +(i 1) init_group ~!groups this_sep ~!this_group)
        .SecKeywordClause(kw)
            push(~!groups ClauseGroup(this_sep this_group))
            set. this_group list¡
            group_clauses_loop(clauses +(i 1) init_group ~!groups NamedSep(kw) ~!this_group)
        .ColonClause
            push(~!groups ClauseGroup(this_sep this_group))
            set. this_group list¡
            group_clauses_loop(clauses +(i 1) init_group ~!groups ColonSep ~!this_group)
        .Label(expr)
            push(~!groups ClauseGroup(this_sep this_group))
            set. this_group list¡
            group_clauses_loop(clauses +(i 1) init_group ~!groups LabelSep(expr) ~!this_group)
    else,
        push(~!groups ClauseGroup(this_sep this_group))
        ClauseGrouping(init_group groups)

fun. group_clauses_init(∈.(clauses List(Clause)) ∈.(i Int) ~!init_group)
    let. mut, groups list¡
    let. mut, this_group list¡
    if. <(i len(clauses))
        case. get(clauses i)
        .ExprClause(expr)
            push(~!init_group expr)
            group_clauses_init(clauses +(i 1) ~!init_group)
        .SecKeywordClause(kw)
            group_clauses_loop(clauses +(i 1) init_group ~!groups NamedSep(kw) ~!this_group)
        .ColonClause
            group_clauses_loop(clauses +(i 1) init_group ~!groups ColonSep ~!this_group)
        .Label(expr)
            group_clauses_loop(clauses +(i 1) init_group ~!groups LabelSep(expr) ~!this_group)
    else,
        ClauseGrouping(init_group list¡)

fun. group_clauses(∈.(clauses List(Clause)))
    let. mut, init_group list¡
    group_clauses_init(clauses 0 ~!init_group)

fun. r_expr→u_func_param_type(∈.(r_expr R_Expr))
    case. r_expr
    .R_Expr(R_Special("~" list.(ExprClause(r_expr))) _) U_FuncParamMutType(r_expr→u_type(r_expr))
    ._ U_FuncParamConstType(r_expr→u_type(r_expr))

fun. r_expr→u_type(∈.(expr R_Expr))
    let. R_Expr(expr_data file_pos) expr
    let. type_data case. expr_data
        .R_Ident(name) U_Named(name list¡)
        .R_Apply(R_Expr(R_Ident(base) _) params)
            if. =(len(params) 0)
                error(InvalidType file_pos)
            else, *¡
            U_Named‡ base map‡ params λ. param: case. param
                .ExprClause(expr) r_expr→u_type(expr)
                ._ error(InvalidType file_pos)
        .R_Special("*" clauses) U_TupleType‡ map‡ clauses λ. clause: case. clause
            .ExprClause(expr) r_expr→u_type(expr)
            ._ error(InvalidType file_pos)
        .R_Special("⇒" clauses) case. group_clauses(clauses)
            .ClauseGrouping(params list.(ClauseGroup(ColonSep list.(ret))))
                U_Function(map(params r_expr→u_func_param_type) r_expr→u_type(ret) None)
            .ClauseGrouping(params list.(ClauseGroup(ColonSep list.(ret)) ClauseGroup(NamedSep("ε") effects)))
                U_Function(map(params r_expr→u_func_param_type) r_expr→u_type(ret) Some(map(effects r_expr→u_effect)))
            ._ error(InvalidType file_pos)
        ._ error(InvalidType file_pos)
    U_Type(type_data file_pos)

fun. r_expr→u_pattern(∈.(expr R_Expr))
    let. R_Expr(expr_data file_pos) expr
    let. pattern_data case. expr_data
        .R_IntLiteral(n) U_IntLiteralPattern(n)
        .R_CharLiteral(c) U_IntLiteralPattern(c)
        .R_StringLiteral(s) U_ListPattern(map(s λ.(c: U_Pattern(U_IntLiteralPattern(c) file_pos))))
        .R_Ident(name) U_IdentPattern(name)
        .R_Wildcard U_WildcardPattern
        .R_Apply(R_Expr(R_Ident(ctor) _) args)
            if. =(len(args) 0)
                error(InvalidPattern file_pos)
            else, *¡
            U_VariantPattern‡ ctor map‡ args λ. arg: case. arg
                .ExprClause(expr) r_expr→u_pattern(expr)
                ._ error(InvalidPattern file_pos)
        .R_Special("*" clauses) U_TuplePattern‡ map‡ clauses λ. clause:
            case. clause
            .ExprClause(expr) r_expr→u_pattern(expr)
            ._ error(InvalidPattern file_pos)
        .R_Special("∈" list.(ExprClause(pattern) ExprClause(type)))
            U_TypedPattern(r_expr→u_pattern(pattern) r_expr→u_type(type))
        .R_Special("list" clauses) U_ListPattern‡ map‡ clauses λ. clause:
            case. clause
            .ExprClause(expr) r_expr→u_pattern(expr)
            ._ error(InvalidPattern file_pos)
        ._ error(InvalidPattern file_pos)
    U_Pattern(pattern_data file_pos)

fun. r_expr→string(∈.(expr R_Expr) ∈.(kw List(Int)) ∈.(file_pos FilePos))
    case. expr
    .R_Expr(R_Ident(s) _) s
    ._ error(InvalidExpr(Some(kw)) file_pos)

fun. block→u_expr(∈.(exprs List(R_Expr)) ∈.(file_pos FilePos))
    U_Expr(U_Do(r_exprs→u_statements(exprs)) file_pos)

fun. split_off(∈.(exprs List(R_Expr)) ∈.(kw List(Int)) ∈.(file_pos FilePos))
    if. ≥(len(exprs) 1)
    then, *.(get(exprs 0) drop(exprs 1))
    else, error(InvalidExpr(Some(kw)) file_pos)

fun. <grouping→if>_loop(∈.(groups List(ClauseGroup)) ∈.(i Int) ~!branches ∈.(file_pos FilePos))
    fun. invalid_expr() error(InvalidExpr(Some("if")) file_pos)
    if. <(i len(groups))
        let. ClauseGroup(sep content) get(groups i)
        case. sep
        .LabelSep(cond)
            push(~!branches *.(r_expr→u_expr(cond) block→u_expr(content file_pos)))
            <grouping→if>_loop(groups +(i 1) ~!branches file_pos)
        .NamedSep("else")
            if. ≠(len(groups) +(i 1))
                invalid_expr()
            else, *¡
            U_If(branches block→u_expr(content file_pos))
        ._
            if. case.(sep
                .ColonSep ⊤
                .NamedSep("if") ⊤
                ._ ⊥)
            then, *¡
            else, invalid_expr()
            if. <(+(i 1) len(groups))
                let. ClauseGroup(sep′ content′) get(groups +(i 1))
                case. sep′
                .NamedSep("then")
                    push(~!branches *.(block→u_expr(content file_pos) block→u_expr(content′ file_pos)))
                    <grouping→if>_loop(groups +(i 2) ~!branches file_pos)
                ._
                    let. *.(cond then) split_off(content "if" file_pos)
                    push(~!branches *.(r_expr→u_expr(cond) block→u_expr(then file_pos))) 
                    <grouping→if>_loop(groups +(i 1) ~!branches file_pos)
            else,
                U_If(branches block→u_expr(content file_pos))
    else, invalid_expr()

fun. grouping→if(ClauseGrouping(first_group groups) ∈.(file_pos FilePos))
    fun. invalid_expr() error(InvalidExpr(Some("if")) file_pos)
    if. =(len(groups) 0)
    then, if. =(%(len(first_group) 2) 1)
        then, U_If‡
            map_ι(/(len(first_group) 2) λ.(i: *.(r_expr→u_expr(get(first_group *(2 i))) r_expr→u_expr(get(first_group +(*(2 i) 1))))))
            r_expr→u_expr(get(first_group -(len(first_group) 1)))
        else, invalid_expr()
    else,
        if. =(len(first_group) 0)
        then,
            let. mut, branches list¡
            <grouping→if>_loop(groups 0 ~!branches file_pos)
        else,
            let. mut, branches list¡
            <grouping→if>_loop(++(list.(ClauseGroup(ColonSep first_group)) groups) 0 ~!branches file_pos)

fun. r_expr→u_func_param(∈.(r_expr R_Expr))
    case. r_expr
    .R_Expr(R_Special("~" list.(ExprClause(R_Expr(R_Ident(name) file_pos)))) _) U_FuncParamMut(name file_pos)
    ._ U_FuncParamConst(r_expr→u_pattern(r_expr))

fun. clauses→expr_data(∈.(kw List(Int)) ∈.(clauses List(Clause)) ∈.(file_pos FilePos))
    fun. block→u_expr′(∈.(exprs List(R_Expr))) block→u_expr(exprs file_pos)
    fun. split_off′(∈.(exprs List(R_Expr))) split_off(exprs kw file_pos)
    fun. invalid_expr() error(InvalidExpr(Some(kw)) file_pos)
    fun. clause→expr(∈.(clause Clause)) case. clause
        .ExprClause(elem) r_expr→u_expr(elem)
        ._ invalid_expr()

    case. kw
    ."do"
        U_Do‡ r_exprs→u_statements‡ map‡ clauses λ. clause:
            case. clause
            .ExprClause(elem) elem
            ._ invalid_expr()
    ."*"
        U_Tuple‡ map‡ clauses λ. clause:
            case. clause
            .ExprClause(elem) r_expr→u_expr(elem)
            ._ invalid_expr()
    ."∈" case. clauses
        .list.(ExprClause(val) ExprClause(type)) U_Typed(r_expr→u_expr(val) r_expr→u_type(type))
        ._ invalid_expr()
    ."if" grouping→if(group_clauses(clauses) file_pos)
    ."while"
        let. *.(cond body) case. group_clauses(clauses)
            .ClauseGrouping(cond list.(ClauseGroup(NamedSep("do") body)))
                *.(cond body)
            .ClauseGrouping(cond list.(ClauseGroup(ColonSep body)))
                *.(cond body)
            .ClauseGrouping(cond+body list¡)
                let. *.(cond body) split_off′(cond+body)
                *.(list.(cond) body)
            ._ invalid_expr()
        U_While(block→u_expr′(cond) block→u_expr′(body))
    ."λ"
        let. *.(params body) case. group_clauses(clauses)
            .ClauseGrouping(params list.(ClauseGroup(NamedSep("⇒") body)))
                *.(params body)
            .ClauseGrouping(params list.(ClauseGroup(ColonSep body)))
                *.(params body)
            ._ invalid_expr()
        U_Lambda(map(params r_expr→u_func_param) block→u_expr′(body))
    ."case"
        let. ClauseGrouping(matched groups) group_clauses(clauses)
        U_Case‡ block→u_expr′(matched) map‡ groups λ. ClauseGroup(sep body):
            case. sep
            .LabelSep(pattern) *.(r_expr→u_pattern(pattern) block→u_expr′(body))
            ._ invalid_expr()
    ."∧" U_And(map(clauses clause→expr))
    ."∨" U_Or(map(clauses clause→expr))
    ."list" U_ListLiteral(map(clauses clause→expr))
    ._ invalid_expr()

fun. r_expr→u_func_arg(∈.(r_expr R_Expr))
    case. r_expr
    .R_Expr(R_Special("~" list.(ExprClause(R_Expr(R_Ident(name) file_pos)))) _) U_FuncArgMut(name file_pos)
    ._ U_FuncArgConst(r_expr→u_expr(r_expr))

fun. r_expr→u_expr(∈.(r_expr R_Expr))
    let. R_Expr(r_expr_data file_pos) r_expr
    let. expr_data case. r_expr_data
        .R_IntLiteral(n) U_IntLiteral(n)
        .R_CharLiteral(c) U_IntLiteral(c)
        .R_StringLiteral(s) U_StringLiteral(s)
        .R_Ident(s) U_Ident(s)
        .R_Apply(func args) U_Apply‡ r_expr→u_expr(func) map‡ args λ. arg: case. arg
            .ExprClause(expr) r_expr→u_func_arg(expr)
            ._ error(InvalidExpr(None) file_pos)
        .R_Special(kw clauses) clauses→expr_data(kw clauses file_pos)
        ._ error(InvalidExpr(None) file_pos)
    U_Expr(expr_data file_pos)

fun. parse_fun_clauses(∈.(clauses List(Clause)) ∈.(file_pos FilePos))
    fun. invalid_expr() error(InvalidExpr(Some("fun")) file_pos)
    fun. split_off′(∈.(exprs List(R_Expr))) split_off(exprs "fun" file_pos)
    let. *.(call body type_params effect_params ret_type effects) case. group_clauses(clauses)
        .ClauseGrouping(call+body list¡)
            let. *.(call body) split_off′(call+body)
            *.(call body None None None None)
        .ClauseGrouping(list.(call) list.(ClauseGroup(NamedSep("∈") ret_type+body)))
            let. *.(ret_type body) split_off′(ret_type+body)
            *.(call body None None Some(ret_type) None)
        .ClauseGrouping(list.(call) list.(ClauseGroup(NamedSep("∈") list.(ret_type)) ClauseGroup(NamedSep("ε") effects) ClauseGroup(ColonSep body)))
            *.(call body None None Some(ret_type) Some(effects))
        .ClauseGrouping(list¡ list.(ClauseGroup(NamedSep("∀") type_params) ClauseGroup(ColonSep list.(call)) ClauseGroup(NamedSep("∈") ret_type+body)))
            let. *.(ret_type body) split_off′(ret_type+body)
            *.(call body Some(type_params) None Some(ret_type) None)
        .ClauseGrouping(list¡ list.(ClauseGroup(NamedSep("∀") type_params) ClauseGroup(ColonSep list.(call)) ClauseGroup(NamedSep("∈") list.(ret_type)) ClauseGroup(NamedSep("ε") effects) ClauseGroup(ColonSep body)))
            *.(call body Some(type_params) None Some(ret_type) Some(effects))
        .ClauseGrouping(list¡ list.(ClauseGroup(NamedSep("∀") type_params) ClauseGroup(ColonSep list¡) ClauseGroup(NamedSep("∀ε") effect_params) ClauseGroup(ColonSep list.(call)) ClauseGroup(NamedSep("∈") list.(ret_type)) ClauseGroup(NamedSep("ε") effects) ClauseGroup(ColonSep body)))
            *.(call body Some(type_params) Some(effect_params) Some(ret_type) Some(effects))
        ._ invalid_expr()
    case. call
    .R_Expr(R_Apply(R_Expr(R_Ident(name) _) r_params) _) *.
        name
        opt_map(type_params λ.(ps: map(ps λ.(e: r_expr→string(e "fun" file_pos)))))
        opt_map(effect_params λ.(ps: map(ps λ.(e: r_expr→string(e "fun" file_pos)))))
        map‡ r_params λ. param: case. param
            .ExprClause(expr) r_expr→u_func_param(expr)
            ._ error(InvalidExpr(None) file_pos)
        opt_map(ret_type r_expr→u_type)
        opt_map(effects λ.(effects: map(effects r_expr→u_effect)))
        block→u_expr(body file_pos)
    ._ invalid_expr()

fun. r_exprs→u_statements(∈.(r_exprs List(R_Expr)))
    let. mut, u_statements list¡
    let. mut, i 0
    while. <(i len(r_exprs))
        let. r_expr get(r_exprs i)
        let. R_Expr(r_expr_data file_pos) r_expr
        set. i +(i 1)
        let. u_expr_data case.(r_expr_data
        .R_Special(kw clauses)
            fun. r_expr→string′(∈.(expr R_Expr)) r_expr→string(expr kw file_pos)
            fun. block→u_expr′(∈.(exprs List(R_Expr))) block→u_expr(exprs file_pos)
            fun. invalid_expr() error(InvalidExpr(Some(kw)) file_pos)
            fun. split_off′(∈.(exprs List(R_Expr))) split_off(exprs kw file_pos)
            case. kw
            ."let" case. group_clauses(clauses)
                .ClauseGrouping(pattern+body list¡)
                    let. *.(pattern body) split_off′(pattern+body)
                    U_Let(r_expr→u_pattern(pattern) block→u_expr′(body))
                ._ invalid_expr()
            ."var" case. group_clauses(clauses)
                .ClauseGrouping(name+body list¡)
                    let. *.(name body) split_off′(name+body)
                    U_Var(r_expr→string′(name) block→u_expr′(body) None)
                .ClauseGrouping(name+body list.(ClauseGroup(NamedSep("ε") list.(effect))))
                    let. *.(name body) split_off′(name+body)
                    U_Var(r_expr→string′(name) block→u_expr′(body) Some(r_expr→string′(effect)))
                ._ invalid_expr()
            ."fun"
                let. mut, defs list.(parse_fun_clauses(clauses file_pos))
                fun. read_fun_loop()
                    if. <(i len(r_exprs))
                        let. R_Expr(r_expr_data file_pos) get(r_exprs i)
                        case. r_expr_data
                        .R_Special("fun" clauses)
                            set. i +(i 1)
                            push(~!defs parse_fun_clauses(clauses file_pos))
                            read_fun_loop()
                        ._
                    else,
                read_fun_loop()
                U_Fun(defs)
            ."type" case. group_clauses(clauses)
                .ClauseGrouping(name+variants list¡)
                    let. *.(name variant_exprs) split_off′(name+variants)
                    let. variants map‡ variant_exprs λ. expr:
                        case. expr
                        .R_Expr(R_Apply(R_Expr(R_Ident(variant_name) _) params) _)
                            if. >(len(params) 0)
                                *.
                                    variant_name
                                    map‡ params λ. param: case. param
                                        .ExprClause(expr) r_expr→u_type(expr)
                                        ._ error(InvalidExpr(Some(kw)) file_pos)
                            else, error(InvalidExpr(Some(kw)) file_pos)
                        .R_Expr(R_Ident(variant_name) _)
                            *.(variant_name list¡)
                        ._ error(InvalidExpr(Some(kw)) file_pos)
                    U_TypeStatement(r_expr→string′(name) list¡ variants)
                .ClauseGrouping(list¡ list.(ClauseGroup(NamedSep("∀") type_params) ClauseGroup(ColonSep name+variants)))
                    let. *.(name variant_exprs) split_off′(name+variants)
                    let. variants map‡ variant_exprs λ. expr:
                        case. expr
                        .R_Expr(R_Apply(R_Expr(R_Ident(variant_name) _) params) _)
                            if. >(len(params) 0)
                                *.
                                    variant_name
                                    map‡ params λ. param: case. param
                                        .ExprClause(expr) r_expr→u_type(expr)
                                        ._ error(InvalidExpr(Some(kw)) file_pos)
                            else, error(InvalidExpr(Some(kw)) file_pos)
                        .R_Expr(R_Ident(variant_name) _)
                            *.(variant_name list¡)
                        ._ error(InvalidExpr(Some(kw)) file_pos)
                    U_TypeStatement(r_expr→string′(name) map(type_params r_expr→string′) variants)
                ._ invalid_expr()
            ."extern" case. group_clauses(clauses)
                .ClauseGrouping(list.(R_Expr(R_Ident(name) _) type) list¡)
                    U_Extern(name r_expr→u_type(type))
                ._ invalid_expr()
            ."set" case. group_clauses(clauses)
                .ClauseGrouping(name+body list¡)
                    let. *.(name_r_expr body) split_off′(name+body)
                    let. name case. name_r_expr
                        .R_Expr(R_Ident(name) _) name
                        ._ invalid_expr()
                    U_Set(name block→u_expr′(body))
                ._ invalid_expr()
            ."effect" case. clauses
                .list.(ExprClause(R_Expr(R_Ident(name) _)))
                    U_EffectStatement(name)
                ._ invalid_expr()
            ._ U_ExprStatement(U_Expr(clauses→expr_data(kw clauses file_pos) file_pos))
        ._ U_ExprStatement(r_expr→u_expr(r_expr))
        )
        push(~!u_statements U_Statement(u_expr_data file_pos))
    u_statements

fun. r_expr→u_effect(∈.(r_expr R_Expr))
    let. R_Expr(r_expr_data file_pos) r_expr
    case. r_expr_data
    .R_Ident(name)
        U_Effect(U_NamedEffect(name) file_pos)
    .R_Special("~" list.(ExprClause(R_Expr(R_Ident(name) _))))
        U_Effect(U_VarEffect(name) file_pos)
    ._
        error(InvalidEffect file_pos)
