fun. ∀, T: id(∈.(x T)) x

fun. ¬(∈.(x Bool))
    if. x ⊥ ⊤

type. ∀, T: Option
    Some(T)
    None

fun. ∀, T: default(∈.(v T) ∈.(x Option(T)))
    case. x
    .Some(x) x
    .None v

fun. for_ι(∈.(n Int) ∈.(f ⇒.(Int : *¡)))
    let. mut, i 0
    while. <(i n)
        f(i)
        set. i +(i 1)

fun. ∀, T: for(∈.(xs List(T)) ∈.(f ⇒.(T : *¡)))
    for_ι(len(xs) λ.(i: f(get(xs i))))

fun. ∀, T U: for2(∈.(xs List(T)) ∈.(ys List(U)) ∈.(f ⇒.(T U : *¡)))
    if. =(len(xs) len(ys))
        for_ι(len(xs) λ.(i: f(get(xs i) get(ys i))))
        Some(*¡)
    else, None

fun. ∀, T U: map(∈.(xs List(T)) ∈.(f ⇒.(T : U)))
    let. mut, ys list¡
    for‡ xs λ. x: push(~!ys f(x))
    ys

fun. ∀, T: map_ι(∈.(n Int) ∈.(f ⇒.(Int : T)))
    let. mut, ys list¡
    for_ι(n λ.(i: push(~!ys f(i))))
    ys

fun. ∀, T U: map_opt(∈.(xs List(T)) ∈.(f ⇒.(T : Option(U))))
    let. mut, ys list¡
    for‡ xs λ. x:
        case. f(x)
        .Some(y) push(~!ys y)
        .None *¡
    ys

fun. ι(∈.(n Int))
    map_ι(n id)

fun. ∀, T: ι*(∈.(xs List(T)))
    map_ι‡ len(xs) λ. i:
        *.(i get(xs i))

fun. ∀, T: ∀(∈.(xs List(T)) ∈.(f ⇒.(T : Bool)))
    let. mut, r ⊤
    for‡ xs λ. x:
        if. f(x) then, *¡ else, set.(r ⊥)
    r

fun. ∀, T: ∃(∈.(xs List(T)) ∈.(f ⇒.(T : Bool)))
    let. mut, r ⊥
    for‡ xs λ. x:
        if. f(x) then, set.(r ⊤) else, *¡
    r

fun. ∀, T: count(∈.(xs List(T)) ∈.(f ⇒.(T : Bool)))
    let. mut, r 0
    for‡ xs λ. x:
        if. f(x) then, set.(r +(r 1)) else, *¡
    r

fun. ∀, T: last(∈.(xs List(T)))
    if. >(len(xs) 0)
    then, Some(get(xs -(len(xs) 1)))
    else, None

fun. ∀, T: drop(∈.(xs List(T)) ∈.(n Int))
    let. mut, r list¡
    let. mut, i n
    while. <(i len(xs))
        push(~!r get(xs i))
        set. i +(i 1)
    r

fun. ∀, T: ∈(∈.(x T) ∈.(ys List(T)) ∈.(=T ⇒.(T T : Bool)))
    let. mut, r ⊥
    for‡ ys λ. y:
        if. =T(y x)
        then, set. r ⊤
        else, *¡
    r

fun. ∀, T: ∉(∈.(x T) ∈.(ys List(T)) ∈.(=T ⇒.(T T : Bool)))
    ¬(∈(x ys =T))

fun. ∀, T: dedup(∈.(xs List(T)) ∈.(=T ⇒.(T T : Bool)))
    let. mut, r list¡
    for‡ xs λ. x:
        if. ∉(x r =T)
        then, push(~!r x)
        else, *¡
    r

fun. ∀, T: =list(∈.(xs List(T)) ∈.(ys List(T)) ∈.(=T ⇒.(T T : Bool)))
    if. =(len(xs) len(ys))
        let. mut, r ⊤
        for_ι‡ len(xs) λ. i:
            if. ¬(=T(get(xs i) get(ys i)))
            then, set. r ⊥
            else, *¡
        r
    else, ⊥

fun. =list_int(∈.(x List(Int)) ∈.(y List(Int)))
    =list(x y =)

fun. ∀, T: filter(∈.(xs List(T)) ∈.(f ⇒.(T : Bool)))
    let. mut, r list¡
    for‡ xs λ. x: if.(f(x) push(~!r x) *¡)
    r

fun. ∀, T: \(∈.(xs List(T)) ∈.(ys List(T)) ∈.(=T ⇒.(T T : Bool)))
    filter(xs λ.(x: ∉(x ys =T)))

fun. ∀, T: ++(∈.(xs List(T)) ∈.(ys List(T)))
    let. mut, r xs
    for‡ ys λ. y: push(~!r y)
    r

fun. ∀, T: concat(∈.(xss List(List(T))))
    let. mut, r list¡
    for‡ xss λ. xs: set.(r ++(r xs))
    r

fun. sum(∈.(xs List(Int)))
    let. mut, sum 0
    for(xs λ.(x: set.(sum +(sum x))))
    sum

fun. ∀, T: intercalate(∈.(xss List(List(T))) ∈.(sep List(T)))
    if. =(len(xss) 0)
        list¡
    else,
        let. mut, r get(xss 0)
        for_ι(-(len(xss) 1) λ.(i: set.(r ++(r ++(sep get(xss +(i 1)))))))
        r

fun. ∀, T U: zip(∈.(xs List(T)) ∈.(ys List(U)))
    if. =(len(xs) len(ys))
        Some(map_ι(len(xs) λ.(i: *.(get(xs i) get(ys i)))))
    else, None

fun. ∀, T U: unzip(∈.(xs List(*.(T U))))
    let. mut, xs1 list¡
    let. mut, xs2 list¡
    for‡ xs λ. x:
        let. *.(x1 x2) x
        push(~!xs1 x1)
        push(~!xs2 x2)
    *.(xs1 xs2)

fun. int→string(∈.(n Int))
    let. mut, n n
    let. mut, s
        if. >(n 0)
            list¡
        if, <(n 0)
            set. n -(0 n)
            "-"
        else,
            "0"
    while. >(n 0)
        set. s ++(list.(+(#0 %(n 10))) s)
        set. n /(n 10)
    s

fun. ∀, T: repeat(∈.(n Int) ∈.(x T))
    let. mut, a list¡
    for_ι(n λ.(_: push(~!a x)))
    a

fun. ∀, T: is_permutation(∈.(a1 List(T)) ∈.(a2 List(T)) ∈.(=T ⇒.(T T: Bool)))
    if. =(len(a1) len(a2))
        let. mut, found repeat(len(a2) ⊥)
        let. mut, result ⊤
        for‡ a1 λ. x1:
            let. mut, found2 ⊥
            for‡ ι*(a2) λ. *.(i2 x2):
                if. ∧.(¬(found2) ¬(get(found i2)) =T(x1 x2))
                    put(~!found i2 ⊤)
                    set. found2 ⊤
                else, *¡
            if. ¬(found2)
                set. result ⊥
            else, *¡
        result
    else,
        ⊥

fun. min(∈.(a Int) ∈.(b Int))
    if. ≤(a b) a b

fun. max(∈.(a Int) ∈.(b Int))
    if. ≥(a b) a b

fun. sort(∈.(a List(Int)))
    let. mut, a a
    let. mut, i 0
    while. <(i len(a))
        let. mut, j i
        while. ∧.(>(j 0) >(get(a -(j 1)) get(a j)))
            let. t get(a j)
            put(~!a j get(a -(j 1)))
            put(~!a -(j 1) t)
            set. j -(j 1)
        set. i +(i 1)
    a

fun. ∀, T: find(∈.(xs List(T)) ∈.(x T) ∈.(=T ⇒.(T T : Bool)))
    let. mut, found_i None
    for‡ ι*(xs) λ. *.(i x′):
        case. found_i
        .None
            if. =T(x′ x)
                set. found_i Some(i)
            else, *¡
        .Some(_) *¡
    found_i

fun. ∀, T U: find_assoc(∈.(xs List(*.(T U))) ∈.(x T) ∈.(=T ⇒.(T T : Bool)))
    let. mut, found_i None
    for‡ ι*(xs) λ. *.(i *.(x′ _)):
        case. found_i
        .None
            if. =T(x′ x)
                set. found_i Some(i)
            else, *¡
        .Some(_) *¡
    found_i

fun. ∀, T U: get_assoc(∈.(xs List(*.(T U))) ∈.(x T) ∈.(=T ⇒.(T T : Bool)))
    case. find_assoc(xs x =T)
    .None None
    .Some(i)
        let. *.(_ y) get(xs i)
        Some(y)
