※ 2
※ 5
※ 10
※ 0
※ 1
※ 0

let. ∀,{T U} map λ.{a 'List(T) f '‡(T : U)}
    let. mut, a′ empty[U]
    while. <(len[U](a′) len[T](a))
        set. a′ push[U](a′ f(get[T](a len[U](a′))))
    a′

let. ∀,{T} foreach λ.{a 'List(T) f '‡(T : #())}
    let. mut, i 0
    while. <(i len[T](a))
        f(get[T](a i))
        set. i +(i 1)
    #()

let. ∀,{T U V} ∘ λ.{f '‡(U : V) g '‡(T : U)}
    λ.({x 'T} f(g(x)))

let. succ λ.{n 'Int} +(n 1)

let. square λ.{n 'Int} *(n n)

let. bool→int λ.{b 'Bool}
    if.(b then, 1 else, 0)

let. mut, a empty[Int]
set. a push[Int](a 1)
set. a push[Int](a 2)
set. a push[Int](a 3)
let. b map[Int Int](a ∘[Int Int Int](succ square))
let. c map[Int Int](a ∘[Int Bool Int](bool→int λ.(n'Int ⇒, =(%(n 2) 0))))

foreach[Int](b print_int)
foreach[Int](c print_int)
