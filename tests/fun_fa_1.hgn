※ 2
※ 5
※ 10
※ 0
※ 1
※ 0

fun. ∀, T U: map(∈.(a List(T)) ∈.(f ⇒.(T : U)))
    let. mut, a′ empty
    while. <(len(a′) len(a))
        set. a′ push(a′ f(get(a len(a′))))
    a′

fun. ∀, T: foreach(∈.(a List(T)) ∈.(f ⇒.(T : *.())))
    let. mut, i 0
    while. <(i len(a))
        f(get(a i))
        set. i +(i 1)
    *.()

fun. ∀, T U V: ∘(∈.(f ⇒.(U : V)) ∈.(g ⇒.(T : U)))
    λ.(∈.(x T): f(g(x)))

fun. succ(∈.(n Int)) +(n 1)

fun. square(∈.(n Int)) *(n n)

fun. bool→int(∈.(b Bool))
    if.(b then, 1 else, 0)

let. mut, a empty
set. a push(a 1)
set. a push(a 2)
set. a push(a 3)
let. b map(a ∘(succ square))
let. c map(a ∘(bool→int λ.(∈.(n Int) ⇒, =(%(n 2) 0))))

foreach(b print_int)
foreach(c print_int)
