type. I_FuncParam
    I_FuncParamConst(I_Pattern)
    I_FuncParamMut(TypeVar EffectName FilePos)

type. I_StatementData
    I_ExprStatement(I_Expr)
    I_Let(I_Pattern I_Expr)
    I_Var(I_Expr EffectName)
    I_Fun(List(TypeName) List(*.(List(I_FuncParam) I_Expr)))
    I_TypeStatement(TypeName List(TypeName) List(List(TypeVar)))
    I_Extern(List(Int) TypeVar)
    I_Set(Int I_Expr)
    I_EffectStatement(EffectName)

type. I_Statement I_Statement(I_StatementData EffectVar FilePos)

type. I_FuncArg
    I_FuncArgConst(I_Expr)
    I_FuncArgMut(Int)

type. I_ExprData
    I_IntLiteral(Int)
    I_Ident(Int List(TypeVar))
    I_Tuple(List(I_Expr))
    I_Apply(I_Expr List(I_FuncArg))
    I_If(List(*.(I_Expr I_Expr)) I_Expr)
    I_While(I_Expr I_Expr)
    I_And(List(I_Expr))
    I_Or(List(I_Expr))
    I_Do(List(I_Statement))
    I_Lambda(List(I_FuncParam) I_Expr)
    I_Case(I_Expr List(*.(I_Pattern I_Expr)))
    I_ListLiteral(List(I_Expr) TypeVar)

type. I_Expr I_Expr(I_ExprData TypeVar EffectVar FilePos)

type. I_PatternData
    I_IntLiteralPattern(Int)
    I_IdentPattern
    I_WildcardPattern
    I_TuplePattern(List(I_Pattern))
    I_VariantPattern(Int List(I_Pattern) List(TypeVar))
    I_ListPattern(List(I_Pattern) TypeVar)

type. I_Pattern I_Pattern(I_PatternData TypeVar FilePos)

type. TypeName TypeName(Int)
type. TypeVar TypeVar(Int)

type. EffectName EffectName(Int)
type. EffectVar EffectVar(Int)

fun. =type_var(∈.(tv1 TypeVar) ∈.(tv2 TypeVar))
    let. TypeVar(tvi1) tv1
    let. TypeVar(tvi2) tv2
    =(tvi1 tvi2)

fun. =type_name(∈.(tn1 TypeName) ∈.(tn2 TypeName))
    let. TypeName(tni1) tn1
    let. TypeName(tni2) tn2
    =(tni1 tni2)

fun. =effect_var(∈.(tv1 EffectVar) ∈.(tv2 EffectVar))
    let. EffectVar(tvi1) tv1
    let. EffectVar(tvi2) tv2
    =(tvi1 tvi2)

fun. =effect_name(∈.(tn1 EffectName) ∈.(tn2 EffectName))
    let. EffectName(tni1) tn1
    let. EffectName(tni2) tn2
    =(tni1 tni2)

type. I_FuncParamType
    I_FuncParamConstType(TypeVar)
    I_FuncParamMutType(TypeVar EffectName)

type. I_Type
    I_Any
    I_Equal(TypeVar)
    I_Named(TypeName List(TypeVar))
    I_TupleType(List(TypeVar))
    I_Function(List(I_FuncParamType) TypeVar EffectVar)

fun. i_expr_type(∈.(expr I_Expr))
    let. I_Expr(_ type _ _) expr
    type

fun. i_expr_effect(∈.(expr I_Expr))
    let. I_Expr(_ _ effect _) expr
    effect

fun. i_expr_file_pos(∈.(expr I_Expr))
    let. I_Expr(_ _ _ file_pos) expr
    file_pos

fun. i_pattern_type(∈.(pattern I_Pattern))
    let. I_Pattern(_ type _) pattern
    type

fun. i_pattern_file_pos(∈.(pattern I_Pattern))
    let. I_Pattern(_ _ file_pos) pattern
    file_pos

let. mut, named_types list¡

fun. new_type_name(∈.(name Option(List(Int))) ∈.(params Int))
    push(~!named_types *.(name params))
    TypeName(-(len(named_types) 1))

let. int_type new_type_name(Some("Int") 0)
let. bool_type new_type_name(Some("Bool") 0)
let. list_type new_type_name(Some("List") 1)

fun. type_name_string(∈.(tn TypeName))
    let. TypeName(tni) tn
    let. *.(name _) get(named_types tni)
    case. name
    .Some(name) name
    .None ++("?G" int→string(tni))

let. mut, type_variables list¡

type. EffectNameKind
    EffectNameNone
    EffectNameSome(List(Int))
    EffectNameVar(List(Int))

let. mut, effect_names list¡

fun. new_effect_name(∈.(name EffectNameKind))
    push(~!effect_names name)
    EffectName(-(len(effect_names) 1))

let. mut, effect_vars list¡

type. EffectComponent
    EffectAdd(EffectVar)
    EffectBlock(EffectName)

type. EffectVarData
    EffectUnset(FilePos)
    EffectNamed(EffectName)
    EffectSum(List(EffectComponent))
    EffectSubst(EffectVar List(*.(EffectName EffectName)))

fun. new_effect(∈.(effect_data EffectVarData))
    push(~!effect_vars effect_data)
    EffectVar(-(len(effect_vars) 1))

fun. new_unset_effect(∈.(file_pos FilePos))
    new_effect(EffectUnset(file_pos))

fun. new_named_effect(∈.(en EffectName))
    new_effect(EffectNamed(en))

fun. new_sum_effect(∈.(subeffects List(EffectVar)))
    new_effect(EffectSum(map(subeffects EffectAdd)))

fun. new_compound_effect(∈.(components List(EffectComponent)))
    new_effect(EffectSum(components))

fun. new_subst_effect(∈.(ev EffectVar) ∈.(subs List(*.(EffectName EffectName))))
    new_effect(EffectSubst(ev subs))

let. mut, equal_effects list¡
let. mut, contained_effects list¡

fun. unify_effect(∈.(ev1 EffectVar) ∈.(ev2 EffectVar) ∈.(params1 List(EffectName)) ∈.(params2 List(EffectName)) ∈.(err Error) ∈.(file_pos FilePos))
    let. subs case. zip(params1 params2)
        .Some(subs) subs
        .None internal_error("params1 and params2 have different lengths")
    let. EffectVar(evi1) ev1
    let. EffectVar(evi2) ev2
    case. *.(get(effect_vars evi1) get(effect_vars evi2))
    .*.(EffectUnset(_) _)
        put(~!effect_vars evi1 EffectSubst(ev2 map(subs λ.(*.(x y): *.(y x)))))
    .*.(_ EffectUnset(_))
        put(~!effect_vars evi2 EffectSubst(ev1 subs))
    ._
        push(~!equal_effects *.(ev1 ev2 subs err file_pos))

fun. unify_subeffect(∈.(ev1 EffectVar) ∈.(ev2 EffectVar) ∈.(file_pos FilePos))
    push(~!contained_effects *.(ev1 ev2 file_pos))

fun. set_effect(∈.(ev EffectVar) ∈.(data EffectVarData))
    let. EffectVar(evi) ev
    case. get(effect_vars evi)
    .EffectUnset(_)
        put(~!effect_vars evi data)
    ._
        internal_error("Tried to set effect that was already set")

fun. effect_name_string(∈.(en EffectName))
    let. EffectName(eni) en
    case. get(effect_names eni)
    .EffectNameNone ++("?EG" int→string(eni))
    .EffectNameSome(name) name
    .EffectNameVar(name) ++("~!" name)

fun. params_effects(∈.(params List(I_FuncParam)))
    map_opt‡ params λ. param: case. param
        .I_FuncParamConst(_) None
        .I_FuncParamMut(_ en _) Some(en)

fun. param_types_effects(∈.(params List(I_FuncParamType)))
    map_opt‡ params λ. param: case. param
        .I_FuncParamConstType(_) None
        .I_FuncParamMutType(_ en) Some(en)

fun. func_param_type_referenced_types(∈.(fpt I_FuncParamType))
    case. fpt
    .I_FuncParamConstType(t) type_referenced_types(t)
    .I_FuncParamMutType(t _) type_referenced_types(t)

fun. type_referenced_types′(∈.(tv TypeVar))
    let. TypeVar(tvi) tv
    case. get(type_variables tvi)
    .I_Any list.(tv)
    .I_Equal(tv′) type_referenced_types′(tv′)
    .I_Named(_ args) concat(map(args type_referenced_types′))
    .I_TupleType(types) concat(map(types type_referenced_types′))
    .I_Function(params ret _) concat(++(map(params func_param_type_referenced_types) list.(type_referenced_types′(ret))))

fun. type_referenced_types(∈.(tv TypeVar)) dedup(type_referenced_types′(tv) =type_var)

fun. func_param_type_referenced_type_names(∈.(fpt I_FuncParamType))
    case. fpt
    .I_FuncParamConstType(t) type_referenced_type_names(t)
    .I_FuncParamMutType(t _) type_referenced_type_names(t)

fun. type_referenced_type_names′(∈.(tv TypeVar))
    let. TypeVar(tvi) tv
    case. get(type_variables tvi)
    .I_Any list¡
    .I_Equal(tv′) type_referenced_type_names′(tv′)
    .I_Named(tn args) ++(concat(map(args type_referenced_type_names′)) list.(tn))
    .I_TupleType(types) concat(map(types type_referenced_type_names′))
    .I_Function(params ret _) concat(++(map(params func_param_type_referenced_type_names) list.(type_referenced_type_names′(ret))))

fun. type_referenced_type_names(∈.(tv TypeVar)) dedup(type_referenced_type_names′(tv) =type_name)

fun. effect_referenced_effects′(∈.(ev EffectVar) ~!visited)
    if. ∉(ev visited =effect_var)
        push(~!visited ev)
        let. EffectVar(evi) ev
        case. get(effect_vars evi)
        .EffectUnset(_) list.(ev)
        .EffectNamed(_) list¡
        .EffectSum(components) concat‡ map‡ components λ. comp: case. comp
            .EffectAdd(ev′) effect_referenced_effects′(ev′ ~!visited)
            .EffectBlock(_) list¡
        .EffectSubst(ev′ _) effect_referenced_effects′(ev′ ~!visited)
    else, list¡

fun. func_param_type_referenced_effects′(∈.(fpt I_FuncParamType) ~!visited)
    case. fpt
    .I_FuncParamConstType(t) type_referenced_effects′(t ~!visited)
    .I_FuncParamMutType(t _) type_referenced_effects′(t ~!visited)

fun. type_referenced_effects′(∈.(tv TypeVar) ~!visited)
    let. TypeVar(tvi) tv
    case. get(type_variables tvi)
    .I_Any list¡
    .I_Equal(tv′) type_referenced_effects′(tv′ ~!visited)
    .I_Named(_ args) concat(map(args λ.(t: type_referenced_effects′(t ~!visited))))
    .I_TupleType(subtypes) concat(map(subtypes λ.(t: type_referenced_effects′(t ~!visited))))
    .I_Function(params ret eff) concat(++(map(params λ.(t: func_param_type_referenced_effects′(t ~!visited))) list.(type_referenced_effects′(ret ~!visited) effect_referenced_effects′(eff ~!visited))))

fun. type_referenced_effects(∈.(tv TypeVar))
    let. mut, visited list¡
    dedup(type_referenced_effects′(tv ~!visited) =effect_var)

fun. new_type_var_with_type(∈.(type I_Type))
    push(~!type_variables type)
    TypeVar(-(len(type_variables) 1))

fun. new_type_var()
    new_type_var_with_type(I_Any)

fun. assign_type_var(∈.(tv TypeVar) ∈.(type I_Type) ∈.(file_pos FilePos))
    ※ FIXME awful hack to bypass type_referenced_types taking a TypeVar
    if. ∈(tv type_referenced_types(new_type_var_with_type(type)) =type_var)
        error(CyclicalType file_pos)
    else, *¡
    let. TypeVar(tvi) tv
    put(~!type_variables tvi type)

fun. i_func_param_type→partial_param_type(∈.(pt I_FuncParamType))
    case. pt
    .I_FuncParamConstType(t) P_FuncParamConstType(type_var→partial_type(t))
    .I_FuncParamMutType(t _) P_FuncParamMutType(type_var→partial_type(t))

fun. i_type→partial_type(∈.(t I_Type) ∈.(tvi Int))
    case. t
    .I_Any P_Var(tvi)
    .I_Equal(tv′) type_var→partial_type(tv′)
    .I_Named(tn args) P_Applied(type_name_string(tn) map(args type_var→partial_type))
    .I_TupleType(types) P_TupleType(map(types type_var→partial_type))
    .I_Function(params ret EffectVar(evi)) P_Function(map(params i_func_param_type→partial_param_type) type_var→partial_type(ret) evi)

fun. type_var→partial_type(∈.(tv TypeVar))
    let. TypeVar(tvi) tv
    i_type→partial_type(get(type_variables tvi) tvi)

fun. unify_func_param_type(∈.(pt1 I_FuncParamType) ∈.(pt2 I_FuncParamType) ∈.(err Error) ∈.(file_pos FilePos))
    case. *.(pt1 pt2)
    .*.(I_FuncParamConstType(t1) I_FuncParamConstType(t2)) unify_type′(t1 t2 err file_pos)
    .*.(I_FuncParamMutType(t1 _) I_FuncParamMutType(t2 _)) unify_type′(t1 t2 err file_pos)
    ._ error(err file_pos)

fun. unify_type_value′(∈.(t1 I_Type) ∈.(t2 I_Type) ∈.(err Error) ∈.(file_pos FilePos))
    case. *.(t1 t2)
    .*.(I_Any _) *¡
    .*.(_ I_Any) *¡
    .*.(I_Equal(tv1) _) set_type′(tv1 t2 err file_pos)
    .*.(_ I_Equal(tv2)) set_type′(tv2 t1 err file_pos)
    .*.(I_Named(TypeName(n1) args1) I_Named(TypeName(n2) args2))
        if. =(n1 n2) case. for2(args1 args2 λ.(tv1 tv2: unify_type′(tv1 tv2 err file_pos)))
            .None error(err file_pos)
            .Some(*¡) *¡
        else, error(err file_pos)
    .*.(I_TupleType(types1) I_TupleType(types2))
        case. for2(types1 types2 λ.(tv1 tv2: unify_type′(tv1 tv2 err file_pos)))
        .None error(err file_pos)
        .Some(*¡) *¡
    .*.(I_Function(params1 ret1 eff1) I_Function(params2 ret2 eff2))
        case. for2(params1 params2 λ.(tv1 tv2: unify_func_param_type(tv1 tv2 err file_pos)))
        .None error(err file_pos)
        .Some(*¡) *¡
        unify_type′(ret1 ret2 err file_pos)
        unify_effect(eff1 eff2 param_types_effects(params1) param_types_effects(params2) err file_pos)
    ._ error(err file_pos)

fun. unify_type′(∈.(tv1 TypeVar) ∈.(tv2 TypeVar) ∈.(err Error) ∈.(file_pos FilePos))
    if. =type_var(tv1 tv2) *¡
    else,
        let. TypeVar(tvi1) tv1
        let. TypeVar(tvi2) tv2
        let. t1 get(type_variables tvi1)
        let. t2 get(type_variables tvi2)
        case. *.(t1 t2)
        .*.(I_Equal(tv1′) _) unify_type′(tv1′ tv2 err file_pos)
        .*.(_ I_Equal(tv2′)) unify_type′(tv1 tv2′ err file_pos)
        .*.(I_Any _) assign_type_var(tv1 I_Equal(tv2) file_pos)
        .*.(_ I_Any) assign_type_var(tv2 I_Equal(tv1) file_pos)
        ._ unify_type_value′(t1 t2 err file_pos)

fun. set_type′(∈.(tv1 TypeVar) ∈.(t2 I_Type) ∈.(err Error) ∈.(file_pos FilePos))
    let. TypeVar(tvi1) tv1
    let. t1 get(type_variables tvi1)
    case. *.(t1 t2)
    .*.(I_Equal(tv1′) _) set_type′(tv1′ t2 err file_pos)
    .*.(_ I_Equal(tv2′)) unify_type′(tv1 tv2′ err file_pos)
    .*.(I_Any _) assign_type_var(tv1 t2 file_pos)
    .*.(_ I_Any) *¡
    ._ unify_type_value′(t1 t2 err file_pos)

fun. unify_type(∈.(tv1 TypeVar) ∈.(tv2 TypeVar) ∈.(file_pos FilePos))
    unify_type′(tv1 tv2 ConflictingType(type_var→partial_type(tv1) type_var→partial_type(tv2)) file_pos)

fun. set_type(∈.(tv1 TypeVar) ∈.(t2 I_Type) ∈.(file_pos FilePos))
    set_type′(tv1 t2 ConflictingType(type_var→partial_type(tv1) i_type→partial_type(t2 -(0 1))) file_pos)

type. VarBindingKind
    ConstVB
    MutVB(EffectName)
    CtorVB

type. VarBinding VarBinding(List(Int) List(TypeName) List(EffectName) TypeVar VarBindingKind)

type. I_Context I_Context‡
    List(VarBinding) ※ vars
    List(TypeName)   ※ types
    List(EffectName) ※ effects

let. empty_effect new_sum_effect(list¡)
let. bool_tv new_type_var_with_type(I_Named(bool_type list¡))
let. int_tv new_type_var_with_type(I_Named(int_type list¡))
let. unit_tv new_type_var_with_type(I_TupleType(list¡))
let. arith_tv new_type_var_with_type(I_Function(list.(I_FuncParamConstType(int_tv) I_FuncParamConstType(int_tv)) int_tv empty_effect))
let. cmp_tv new_type_var_with_type(I_Function(list.(I_FuncParamConstType(int_tv) I_FuncParamConstType(int_tv)) bool_tv empty_effect))
let. t_type new_type_name(None 0)
let. t_tv new_type_var_with_type(I_Named(t_type list¡))
let. list_tv new_type_var_with_type(I_Named(list_type list.(t_tv)))
let. e_effect new_effect_name(EffectNameNone)
let. e_ev new_named_effect(e_effect)

let. builtin_types list.(int_type bool_type list_type)

let. empty_i_context I_Context‡
    list.
        VarBinding("⊤" list¡ list¡ bool_tv CtorVB)
        VarBinding("⊥" list¡ list¡ bool_tv CtorVB)
        VarBinding("+" list¡ list¡ arith_tv ConstVB)
        VarBinding("-" list¡ list¡ arith_tv ConstVB)
        VarBinding("*" list¡ list¡ arith_tv ConstVB)
        VarBinding("/" list¡ list¡ arith_tv ConstVB)
        VarBinding("%" list¡ list¡ arith_tv ConstVB)
        VarBinding("=" list¡ list¡ cmp_tv ConstVB)
        VarBinding("≠" list¡ list¡ cmp_tv ConstVB)
        VarBinding("<" list¡ list¡ cmp_tv ConstVB)
        VarBinding("≤" list¡ list¡ cmp_tv ConstVB)
        VarBinding(">" list¡ list¡ cmp_tv ConstVB)
        VarBinding("≥" list¡ list¡ cmp_tv ConstVB)
        VarBinding("len" list.(t_type) list¡ new_type_var_with_type(I_Function(list.(I_FuncParamConstType(list_tv)) int_tv empty_effect)) ConstVB)
        VarBinding("get" list.(t_type) list¡ new_type_var_with_type(I_Function(list.(I_FuncParamConstType(list_tv) I_FuncParamConstType(int_tv)) t_tv empty_effect)) ConstVB)
        VarBinding("put" list.(t_type) list¡ new_type_var_with_type(I_Function(list.(I_FuncParamMutType(list_tv e_effect) I_FuncParamConstType(int_tv) I_FuncParamConstType(t_tv)) unit_tv e_ev)) ConstVB)
        VarBinding("push" list.(t_type) list¡ new_type_var_with_type(I_Function(list.(I_FuncParamMutType(list_tv e_effect) I_FuncParamConstType(t_tv)) unit_tv e_ev)) ConstVB)
        VarBinding("pop" list.(t_type) list¡ new_type_var_with_type(I_Function(list.(I_FuncParamMutType(list_tv e_effect)) t_tv e_ev)) ConstVB)
        VarBinding("print_int" list¡ list¡ new_type_var_with_type(I_Function(list.(I_FuncParamConstType(int_tv)) unit_tv empty_effect)) ConstVB)
        VarBinding("read_int" list¡ list¡ new_type_var_with_type(I_Function(list¡ int_tv empty_effect)) ConstVB)
        VarBinding("print_byte" list¡ list¡ new_type_var_with_type(I_Function(list.(I_FuncParamConstType(int_tv)) unit_tv empty_effect)) ConstVB)
        VarBinding("read_byte" list¡ list¡ new_type_var_with_type(I_Function(list¡ int_tv empty_effect)) ConstVB)
        VarBinding("get_argc" list¡ list¡ new_type_var_with_type(I_Function(list¡ int_tv empty_effect)) ConstVB)
        VarBinding("get_argv_len" list¡ list¡ new_type_var_with_type(I_Function(list.(I_FuncParamConstType(int_tv)) int_tv empty_effect)) ConstVB)
        VarBinding("get_argv_byte" list¡ list¡ new_type_var_with_type(I_Function(list.(I_FuncParamConstType(int_tv) I_FuncParamConstType(int_tv)) int_tv empty_effect)) ConstVB)
        VarBinding("unreachable" list.(t_type) list¡ new_type_var_with_type(I_Function(list¡ t_tv empty_effect)) ConstVB)
    builtin_types
    list¡

fun. locate_var_opt(∈.(name List(Int)) ∈.(context I_Context))
    let. mut, found_i None
    let. I_Context(vars _ _) context
    for_ι‡ len(vars) λ. i:
        let. VarBinding(name′ _ _ monotype _) get(vars i)
        if. =list(name name′ =)
            set. found_i Some(i)
        else, *¡
    found_i

fun. locate_var(∈.(name List(Int)) ∈.(context I_Context) ∈.(file_pos FilePos))
    case. locate_var_opt(name context)
    .Some(i) i
    .None error(UnboundVariable(name) file_pos)

fun. type_from_name(∈.(name List(Int)) ∈.(context I_Context) ∈.(file_pos FilePos))
    let. mut, type None
    let. I_Context(_ types _) context
    for‡ types λ. tn:
        let. TypeName(tni) tn
        let. *.(name′ _) get(named_types tni)
        case. name′
        .Some(name′)
            if. =list(name′ name =)
                set. type Some(tn)
            else, *¡
        .None *¡
    case. type
    .Some(t) t
    .None error(UnboundType(name) file_pos)

fun. effect_from_name(∈.(name List(Int)) ∈.(context I_Context) ∈.(file_pos FilePos))
    let. mut, effect None
    let. I_Context(_ _ effects) context
    for‡ effects λ. en:
        let. EffectName(eni) en
        case. get(effect_names eni)
        .EffectNameSome(name′)
            if. =list(name′ name =)
                set. effect Some(en)
            else, *¡
        ._ *¡
    case. effect
    .Some(e) e
    .None error(UnboundEffect(name) file_pos)

fun. i_add_let_binding(∈.(context I_Context) ∈.(var VarBinding))
    let. I_Context(vars types effects) context
    I_Context(++(vars list.(var)) types effects)

fun. i_add_type_binding(∈.(context I_Context) ∈.(type TypeName))
    let. I_Context(vars types effects) context
    I_Context(vars ++(types list.(type)) effects)

fun. i_add_effect(∈.(context I_Context) ∈.(effect EffectName))
    let. I_Context(vars types effects) context
    I_Context(vars types ++(effects list.(effect)))

fun. variable_is_mut(∈.(vi Int) ∈.(context I_Context))
    let. I_Context(vars _ _) context
    let. VarBinding(_ _ _ _ kind) get(vars vi)
    case. kind
    .MutVB(_) ⊤
    ._ ⊥

fun. variable_is_ctor(∈.(vi Int) ∈.(context I_Context))
    let. I_Context(vars _ _) context
    let. VarBinding(_ _ _ _ kind) get(vars vi)
    case. kind
    .CtorVB ⊤
    ._ ⊥

fun. variable_is_nullary_ctor(∈.(vi Int) ∈.(context I_Context))
    let. I_Context(vars _ _) context
    let. VarBinding(_ _ _ TypeVar(tvi) kind) get(vars vi)
    case. *.(kind get(type_variables tvi))
    .*.(_ I_Function(_ _ _)) ⊥
    .*.(CtorVB _) ⊤
    ._ ⊥

fun. variable_type(∈.(vi Int) ∈.(context I_Context))
    let. I_Context(vars _ _) context
    let. VarBinding(_ type_params effect_params monotype _) get(vars vi)
    *.(type_params effect_params monotype)

fun. variable_effect_name(∈.(vi Int) ∈.(context I_Context))
    let. I_Context(vars _ _) context
    let. VarBinding(_ _ _ _ kind) get(vars vi)
    case. kind
    .MutVB(en) Some(en)
    ._ None

fun. variable_effect(∈.(vi Int) ∈.(context I_Context))
    case. variable_effect_name(vi context)
    .Some(en) new_named_effect(en)
    .None empty_effect

fun. u_func_arg→i_func_arg(∈.(u_func_arg U_FuncArg) ∈.(context I_Context))
    case. u_func_arg
    .U_FuncArgConst(u_expr) I_FuncArgConst(u_expr→i_expr(u_expr context))
    .U_FuncArgMut(name file_pos)
        let. vi locate_var(name context file_pos)
        if. ¬(variable_is_mut(vi context))
            error(PassConstVariableAsMut(name) file_pos)
        else, *¡
        I_FuncArgMut(vi)

fun. substitute_names_in_effect(∈.(effect_subs List(*.(EffectName EffectVar))) ∈.(ev EffectVar) ~!visited)
    let. EffectVar(evi) ev
    case. get(effect_vars evi)
        .EffectUnset(_) ev
        .EffectNamed(en)
            let. EffectName(eni) en
            let. mut, ev′ None
            for‡ effect_subs λ. *.(EffectName(from) to):
                if. =(from eni)
                    set. ev′ Some(to)
                else, *¡
            case. ev′
            .Some(ev′) ev′
            .None ev
        .EffectSum(components)
            case. get_assoc(visited ev =effect_var)
            .Some(ev′) ev′
            .None
                let. ev′ new_unset_effect(FilePos("" 0 0))
                push(~!visited *.(ev ev′))
                set_effect‡ ev′ EffectSum‡ map‡ components λ. comp: case. comp
                    .EffectAdd(ev) EffectAdd(substitute_names_in_effect(effect_subs ev ~!visited))
                    .EffectBlock(en) EffectBlock(en)
                ev′
        .EffectSubst(ev subs)
            let. ev′ new_unset_effect(FilePos("" 0 0))
            push(~!visited *.(ev ev′))
            set_effect(ev′ EffectSubst(substitute_names_in_effect(effect_subs ev ~!visited) subs))
            ev′

fun. substitute_names_in_param_type(∈.(type_subs List(*.(TypeName TypeVar))) ∈.(effect_subs List(*.(EffectName EffectVar))) ∈.(pt I_FuncParamType) ~!visited)
    case. pt
    .I_FuncParamConstType(tv) I_FuncParamConstType(substitute_names(type_subs effect_subs tv ~!visited))
    .I_FuncParamMutType(tv en) I_FuncParamMutType(substitute_names(type_subs effect_subs tv ~!visited) en)

fun. substitute_names(∈.(type_subs List(*.(TypeName TypeVar))) ∈.(effect_subs List(*.(EffectName EffectVar))) ∈.(tv TypeVar) ~!visited)
    let. TypeVar(tvi) tv
    let. type case. get(type_variables tvi)
        .I_Any I_Equal(tv)
        .I_Equal(tv′) I_Equal(substitute_names(type_subs effect_subs tv′ ~!visited))
        .I_Named(tn list¡)
            let. TypeName(tni) tn
            let. mut, tvi′ None
            for‡ type_subs λ. sub:
                let. *.(TypeName(from) TypeVar(to)) sub
                if. =(from tni)
                    set. tvi′ Some(to)
                else, *¡
            case. tvi′
            .Some(tvi′) I_Equal(TypeVar(tvi′))
            .None I_Named(tn list¡)
        .I_Named(tn args) I_Named(tn map(args λ.(t: substitute_names(type_subs effect_subs t ~!visited))))
        .I_TupleType(types) I_TupleType(map(types λ.(t: substitute_names(type_subs effect_subs t ~!visited))))
        .I_Function(params ret eff)
            I_Function(map(params λ.(t: substitute_names_in_param_type(type_subs effect_subs t ~!visited))) substitute_names(type_subs effect_subs ret ~!visited) substitute_names_in_effect(effect_subs eff ~!visited))
    new_type_var_with_type(type)

fun. instantiate_params(∈.(type_params List(TypeName)) ∈.(effect_params List(EffectName)) ∈.(tv TypeVar) ∈.(file_pos FilePos))
    let. type_subs map(type_params λ.(tn: *.(tn new_type_var())))
    let. effect_subs map(effect_params λ.(eff: *.(eff new_unset_effect(file_pos))))
    let. mut, visited list¡
    *.
        substitute_names(type_subs effect_subs tv ~!visited)
        map‡ type_subs λ. sub:
            let. *.(_ tv) sub
            tv

fun. context_referenced_types(∈.(context I_Context))
    let. I_Context(vars _ _) context
    dedup(concat(map(vars λ.(var:
        let. VarBinding(_ _ _ type _) var
        type_referenced_types(type)
    ))) =type_var)

fun. context_referenced_effects(∈.(context I_Context))
    let. I_Context(vars _ _) context
    dedup(concat(map(vars λ.(var:
        let. VarBinding(_ _ _ type _) var
        type_referenced_effects(type)
    ))) =effect_var)

fun. i_func_arg_effect(∈.(arg I_FuncArg))
    case. arg
    .I_FuncArgConst(expr) i_expr_effect(expr)
    .I_FuncArgMut(_) empty_effect

fun. i_func_param_type(∈.(param I_FuncParam))
    case. param
    .I_FuncParamConst(pattern) I_FuncParamConstType(i_pattern_type(pattern))
    .I_FuncParamMut(type en _) I_FuncParamMutType(type en)

fun. u_expr→i_expr(∈.(expr U_Expr) ∈.(context I_Context))
    let. this_type new_type_var()
    let. U_Expr(u_expr_data file_pos) expr
    let. *.(i_expr_data this_effect) case. u_expr_data
        .U_IntLiteral(n)
            set_type(this_type I_Named(int_type list¡) file_pos)
            *.(I_IntLiteral(n) empty_effect)
        .U_Ident(name)
            let. vi locate_var(name context file_pos)
            let. *.(type_params effect_params type) variable_type(vi context)
            let. *.(var_type type_args) instantiate_params(type_params effect_params type file_pos)
            unify_type(this_type var_type file_pos)
            *.(I_Ident(vi type_args) variable_effect(vi context))
        .U_Tuple(u_exprs)
            let. i_exprs map(u_exprs λ.(e: u_expr→i_expr(e context)))
            set_type(this_type I_TupleType(map(i_exprs i_expr_type)) file_pos)
            *.(I_Tuple(i_exprs) new_sum_effect(map(i_exprs i_expr_effect)))
        .U_Apply(u_func u_args)
            let. i_func u_expr→i_expr(u_func context)
            let. i_args map(u_args λ.(e: u_func_arg→i_func_arg(e context)))
            let. call_effect new_unset_effect(file_pos)
            let. mut, subs list¡
            let. param_types map‡ i_args λ. arg: case. arg
                .I_FuncArgConst(expr) I_FuncParamConstType(i_expr_type(expr))
                .I_FuncArgMut(vi)
                    let. *.(_ _ var_type) variable_type(vi context)
                    let. param_effect new_effect_name(EffectNameNone)
                    let. arg_effect case. variable_effect_name(vi context)
                        .Some(en) en
                        .None internal_error("Variable is not mutable")
                    push(~!subs *.(param_effect arg_effect))
                    I_FuncParamMutType(var_type arg_effect)
            set_type(i_expr_type(i_func) I_Function(param_types this_type call_effect) i_expr_file_pos(i_func))
            *.(I_Apply(i_func i_args) new_sum_effect(++(map(i_args i_func_arg_effect) list.(i_expr_effect(i_func) new_subst_effect(call_effect subs)))))
        .U_Typed(u_expr u_type)
            let. I_Expr(i_expr_data i_expr_type i_expr_effect i_expr_file_pos) u_expr→i_expr(u_expr context)
            unify_type(this_type i_expr_type file_pos)
            set_type(i_expr_type u_type→i_type(u_type context) i_expr_file_pos)
            *.(i_expr_data i_expr_effect)
        .U_If(u_cases u_else)
            let. i_cases map‡ u_cases λ. u_case:
                let. *.(u_cond u_body) u_case
                let. i_cond u_expr→i_expr(u_cond context)
                let. i_body u_expr→i_expr(u_body context)
                set_type(i_expr_type(i_cond) I_Named(bool_type list¡) i_expr_file_pos(i_cond))
                unify_type(this_type i_expr_type(i_body) file_pos)
                *.(i_cond i_body)
            let. i_else u_expr→i_expr(u_else context)
            unify_type(this_type i_expr_type(i_else) file_pos)
            *.(I_If(i_cases i_else) new_sum_effect(++(concat(map(i_cases λ.(*.(i_cond i_body): list.(i_expr_effect(i_cond) i_expr_effect(i_body))))) list.(i_expr_effect(i_else)))))
        .U_While(u_cond u_body)
            let. i_cond u_expr→i_expr(u_cond context)
            let. i_body u_expr→i_expr(u_body context)
            set_type(i_expr_type(i_cond) I_Named(bool_type list¡) i_expr_file_pos(i_cond))
            set_type(i_expr_type(i_body) I_TupleType(list¡) i_expr_file_pos(i_cond))
            set_type(this_type I_TupleType(list¡) file_pos)
            *.(I_While(i_cond i_body) new_sum_effect(list.(i_expr_effect(i_cond) i_expr_effect(i_body))))
        .U_Do(u_statements)
            let. *.(i_statements effect) u_statements→i_statements(u_statements context this_type file_pos)
            *.(I_Do(i_statements) effect)
        .U_Lambda(u_params u_body)
            let. *.(i_params bindings) u_func_params→i_func_params(u_params context)
            let. mut, context′ context
            for‡ bindings λ. binding:
                set. context′ i_add_let_binding(context′ binding)
            let. i_body u_expr→i_expr(u_body context′)
            set_type(this_type I_Function(map(i_params i_func_param_type) i_expr_type(i_body) i_expr_effect(i_body)) file_pos)
            *.(I_Lambda(i_params i_body) i_expr_effect(i_body))
        .U_Case(u_expr u_cases)
            let. i_expr u_expr→i_expr(u_expr context)
            let. i_cases map‡ u_cases λ. u_case:
                let. *.(u_pattern u_body) u_case
                let. *.(i_pattern bindings) u_pattern→i_pattern(u_pattern context)
                let. mut, context′ context
                for‡ bindings λ. binding:
                    set. context′ i_add_let_binding(context′ binding)
                let. i_body u_expr→i_expr(u_body context′)
                unify_type(i_pattern_type(i_pattern) i_expr_type(i_expr) i_pattern_file_pos(i_pattern))
                unify_type(this_type i_expr_type(i_body) file_pos)
                *.(i_pattern i_body)
            *.(I_Case(i_expr i_cases) new_sum_effect(++(list.(i_expr_effect(i_expr)) map(i_cases λ.(*.(_ i_body): i_expr_effect(i_body))))))
        .U_And(u_exprs)
            let. i_exprs map(u_exprs λ.(u_expr: u_expr→i_expr(u_expr context)))
            for‡ i_exprs λ. i_expr: set_type(i_expr_type(i_expr) I_Named(bool_type list¡) i_expr_file_pos(i_expr))
            set_type(this_type I_Named(bool_type list¡) file_pos)
            *.(I_And(i_exprs) new_sum_effect(map(i_exprs i_expr_effect)))
        .U_Or(u_exprs)
            let. i_exprs map(u_exprs λ.(u_expr: u_expr→i_expr(u_expr context)))
            for‡ i_exprs λ. i_expr: set_type(i_expr_type(i_expr) I_Named(bool_type list¡) i_expr_file_pos(i_expr))
            set_type(this_type I_Named(bool_type list¡) file_pos)
            *.(I_Or(i_exprs) new_sum_effect(map(i_exprs i_expr_effect)))
        .U_ListLiteral(u_exprs)
            let. i_exprs map(u_exprs λ.(u_expr: u_expr→i_expr(u_expr context)))
            let. elem_type new_type_var()
            set_type(this_type I_Named(list_type list.(elem_type)) file_pos)
            for‡ i_exprs λ. i_expr: unify_type(i_expr_type(i_expr) elem_type i_expr_file_pos(i_expr))
            *.(I_ListLiteral(i_exprs elem_type) new_sum_effect(map(i_exprs i_expr_effect)))
        .U_StringLiteral(s)
            let. elem_type new_type_var_with_type(I_Named(int_type list¡))
            set_type(this_type I_Named(list_type list.(elem_type)) file_pos)
            *.(I_ListLiteral(map(s λ.(c: I_Expr(I_IntLiteral(c) elem_type empty_effect file_pos))) int_tv) empty_effect)
    I_Expr(i_expr_data this_type this_effect file_pos)

fun. u_func_param→i_func_param(∈.(u_func_param U_FuncParam) ∈.(context I_Context))
    case. u_func_param
    .U_FuncParamConst(u_pattern)
        let. *.(i_pattern bindings) u_pattern→i_pattern(u_pattern context)
        *.(I_FuncParamConst(i_pattern) bindings)
    .U_FuncParamMut(name file_pos)
        let. tv new_type_var()
        let. var_effect new_effect_name(EffectNameVar(name))
        *.(I_FuncParamMut(tv var_effect file_pos) list.(VarBinding(name list¡ list¡ tv MutVB(var_effect))))

fun. u_func_params→i_func_params(∈.(u_func_params List(U_FuncParam)) ∈.(context I_Context))
    let. *.(i_func_params bindings_) unzip(map(u_func_params λ.(fp: u_func_param→i_func_param(fp context))))
    let. bindings concat(bindings_)
    *.(i_func_params bindings)

fun. u_bound_vars_in_func_param(∈.(fp U_FuncParam))
    case. fp
    .U_FuncParamConst(pattern) u_bound_vars(pattern)
    .U_FuncParamMut(name _) list.(name)

fun. u_bound_vars(U_Pattern(pattern_data _))
    case. pattern_data
    .U_IntLiteralPattern(_) list¡
    .U_IdentPattern(name) list.(name)
    .U_WildcardPattern list¡
    .U_TuplePattern(subpats) concat(map(subpats u_bound_vars))
    .U_VariantPattern(_ subpats) concat(map(subpats u_bound_vars))
    .U_ListPattern(subpats) concat(map(subpats u_bound_vars))
    .U_TypedPattern(subpat _) u_bound_vars(subpat)

fun. u_free_vars_in_func_arg(∈.(arg U_FuncArg))
    case. arg
    .U_FuncArgConst(expr) u_free_vars(expr)
    .U_FuncArgMut(name _) list.(name)

fun. u_free_vars(U_Expr(expr_data _))
    let. \ λ. x y: \(x y =list_int)
    case. expr_data
    .U_IntLiteral(_) list¡
    .U_Ident(name) list.(name)
    .U_Tuple(subexprs) concat(map(subexprs u_free_vars))
    .U_Apply(func args) concat(++(map(args u_free_vars_in_func_arg) list.(u_free_vars(func))))
    .U_Typed(subexpr _) u_free_vars(subexpr)
    .U_If(cases else) concat(map(++(concat(map(cases λ.(*.(e1 e2): list.(e1 e2)))) list.(else)) u_free_vars))
    .U_While(cond body) ++(u_free_vars(cond) u_free_vars(body))
    .U_And(subexprs) concat(map(subexprs u_free_vars))
    .U_Or(subexprs) concat(map(subexprs u_free_vars))
    .U_Do(statements)
        let. mut, shadowed_vars list¡
        concat‡ map‡ statements λ. U_Statement(statement_data _):
            case. statement_data
            .U_ExprStatement(expr) \(u_free_vars(expr) shadowed_vars)
            .U_Let(pat expr)
                let. fvs \(u_free_vars(expr) shadowed_vars)
                set. shadowed_vars ++(shadowed_vars u_bound_vars(pat))
                fvs
            .U_Var(name expr _)
                let. fvs \(u_free_vars(expr) shadowed_vars)
                push(~!shadowed_vars name)
                fvs
            .U_Fun(defs)
                let. fvs \(concat(map(defs λ.(*.(_ _ params _ _ body): \(u_free_vars(body) concat(map(params u_bound_vars_in_func_param)))))) shadowed_vars)
                set. shadowed_vars ++(shadowed_vars map(defs λ.(*.(name _ _ _ _ _): name)))
                fvs
            .U_TypeStatement(_ _ _) list¡
            .U_Extern(name _)
                push(~!shadowed_vars name)
                list¡
            .U_Set(_ expr) \(u_free_vars(expr) shadowed_vars)
            .U_EffectStatement(_) list¡
    .U_Lambda(params body) \(u_free_vars(body) concat(map(params u_bound_vars_in_func_param)))
    .U_Case(matched cases) concat(++(map(cases λ.(*.(pat expr): \(u_free_vars(expr) u_bound_vars(pat)))) list.(u_free_vars(matched))))
    .U_ListLiteral(subexprs) concat(map(subexprs u_free_vars))
    .U_StringLiteral(_) list¡

fun. get_call_graph(∈.(defs List(*.(List(Int) Option(List(List(Int))) List(U_FuncParam) Option(U_Type) Option(List(U_Effect)) U_Expr))))
    map‡ defs λ. *.(_ _ params _ _ body):
        let. free_vars \(u_free_vars(body) concat(map(params u_bound_vars_in_func_param)) =list_int)
        filter‡ ι(len(defs)) λ. i:
            let. *.(name _ _ _ _ _) get(defs i)
            ∈(name free_vars =list_int)

fun. get_sccs(∈.(graph List(List(Int))))
    let. mut, sccs list¡
    let. mut, next_index 0
    let. mut, visited map(graph λ.(_: ⊥))
    let. mut, index map(graph λ.(_: 0))
    let. mut, lowlink map(graph λ.(_: 0))
    let. mut, stack list¡
    let. mut, on_stack map(graph λ.(_: ⊥))
    fun. rec(i)
        put(~!visited i ⊤)
        put(~!index i next_index)
        put(~!lowlink i next_index)
        set. next_index +(next_index 1)
        push(~!stack i)
        put(~!on_stack i ⊤)
        for‡ get(graph i) λ. j:
            if. ¬(get(visited j))
                rec(j)
                put(~!lowlink i min(get(lowlink i) get(lowlink j)))
            if, get(on_stack j)
                put(~!lowlink i min(get(lowlink i) get(index j)))
            else, *¡
        if. =(get(lowlink i) get(index i))
            let. mut, scc list¡
            while.
                let. j pop(~!stack)
                put(~!on_stack j ⊥)
                push(~!scc j)
                ≠(j i)
            do, *¡
            push(~!sccs scc)
        else, *¡
    for_ι‡ len(graph) λ. i:
        if. ¬(get(visited i))
        then, rec(i)
        else, *¡
    map(sccs sort)

fun. u_statements→i_statements(∈.(statements List(U_Statement)) ∈.(context I_Context) ∈.(this_type TypeVar) ∈.(file_pos FilePos))
    let. mut, context context
    let. mut, num_expr_statements 0
    let. type_names concat‡ map‡ statements λ. statement:
        case. statement
        .U_Statement(U_ExprStatement(_) _)
            set. num_expr_statements +(num_expr_statements 1)
            list¡
        .U_Statement(U_TypeStatement(name type_params _) _)
            let. tn new_type_name(Some(name) len(type_params))
            set. context i_add_type_binding(context tn)
            list.(tn)
        ._ list¡
    let. mut, next_expr_statement 0
    let. mut, next_type_name 0
    let. mut, last_expr_type I_TupleType(list¡)
    let. *.(i_statements_ effect_components_) unzip‡ map‡ statements λ. statement:
        let. U_Statement(u_statement_data file_pos) statement
        case.(u_statement_data
        .U_ExprStatement(u_expr)
            let. i_expr u_expr→i_expr(u_expr context)
            set. next_expr_statement +(next_expr_statement 1)
            if. =(next_expr_statement num_expr_statements)
                set. last_expr_type I_Equal(i_expr_type(i_expr))
            else,
                set_type(i_expr_type(i_expr) I_TupleType(list¡) file_pos)
            *.(list.(I_Statement(I_ExprStatement(i_expr) i_expr_effect(i_expr) file_pos)) list.(EffectAdd(i_expr_effect(i_expr))))
        .U_Let(u_pattern u_expr)
            let. i_expr u_expr→i_expr(u_expr context)
            let. *.(i_pattern bindings) u_pattern→i_pattern(u_pattern context)
            unify_type(i_expr_type(i_expr) i_pattern_type(i_pattern) i_expr_file_pos(i_expr))
            for‡ bindings λ. binding:
                set. context i_add_let_binding(context binding)
            *.(list.(I_Statement(I_Let(i_pattern i_expr) i_expr_effect(i_expr) file_pos)) list.(EffectAdd(i_expr_effect(i_expr))))
        .U_Var(name u_expr var_effect_name)
            let. i_expr u_expr→i_expr(u_expr context)
            let. var_effect case. var_effect_name
                .Some(var_effect_name) effect_from_name(var_effect_name context file_pos)
                .None new_effect_name(EffectNameVar(name))
            set. context i_add_let_binding(context VarBinding(name list¡ list¡ i_expr_type(i_expr) MutVB(var_effect)))
            *.(list.(I_Statement(I_Var(i_expr var_effect) i_expr_effect(i_expr) file_pos)) list.(EffectAdd(i_expr_effect(i_expr)) EffectBlock(var_effect)))
        .U_Fun(u_defs)
            let. fun_types map(u_defs λ.(_: new_type_var()))
            let. call_graph get_call_graph(u_defs)
            let. components get_sccs(call_graph)
            let. fun_statements map‡ components λ. component:
                let. mut, context′ context
                for‡ component λ. i:
                    let. *.(name _ _ _ _ _) get(u_defs i)
                    set. context′ i_add_let_binding(context′ VarBinding(name list¡ list¡ get(fun_types i) ConstVB))
                let. *.(_ type_param_names _ _ _ _) get(u_defs get(component 0))
                for‡ component λ. i:
                    let. *.(_ type_param_names′ _ _ _ _) get(u_defs i)
                    let. equal case. *.(type_param_names type_param_names′)
                        .*.(None None) ⊤
                        .*.(Some(names) Some(names′)) =list(names names′ =list_int)
                        ._ ⊥
                    if. ¬(equal)
                        let. *.(name1 _ _ _ _ _) get(u_defs get(component 0))
                        let. *.(name2 _ _ _ _ _) get(u_defs i)
                        error(MutRecPolyDifferentType(name1 name2) file_pos)
                    else, *¡
                case. type_param_names
                .Some(type_param_names)
                    let. type_params map‡ type_param_names λ. name:
                        let. tn new_type_name(Some(name) 0)
                        set. context′ i_add_type_binding(context′ tn)
                        tn
                    let. i_defs map‡ component λ. i:
                        let. *.(_ _ u_params u_ret_type u_effects u_body) get(u_defs i)
                        let. *.(i_params bindings) u_func_params→i_func_params(u_params context′)
                        let. mut, context″ context′
                        for‡ bindings λ. binding:
                            set. context″ i_add_let_binding(context″ binding)
                        let. i_body u_expr→i_expr(u_body context″)
                        let. i_ret_type case. u_ret_type
                            .Some(u_ret_type) new_type_var_with_type(u_type→i_type(u_ret_type context′))
                            .None i_expr_type(i_body)
                        let. i_effect case. u_effects
                            .Some(u_effects) new_sum_effect(map(u_effects λ.(e: new_named_effect(u_effect→effect_name(e context′)))))
                            .None i_expr_effect(i_body)
                        set_type(get(fun_types i) I_Function(map(i_params i_func_param_type) i_ret_type i_effect) file_pos)
                        unify_type(i_expr_type(i_body) i_ret_type i_expr_file_pos(i_body))
                        unify_subeffect(i_expr_effect(i_body) i_effect i_expr_file_pos(i_body))
                        *.(i_params i_body)
                    for‡ component λ. i:
                        let. unused_type_params \(type_params type_referenced_type_names(get(fun_types i)) =type_name)
                        if. ≠(len(unused_type_params) 0)
                            let. TypeName(tni) get(unused_type_params 0)
                            let. *.(unused_name _) get(named_types tni)
                            let. unused_name case. unused_name
                                .Some(name) name
                                .None internal_error("unused_name is None")
                            error(UnusedTypeParam(unused_name) file_pos)
                        else, *¡
                    let. fun_effect_params map(component λ.(i: \(type_referenced_effects(get(fun_types i)) context_referenced_effects(context) =effect_var)))
                    let. effect_params get(fun_effect_params 0)
                    for‡ ι*(fun_effect_params) λ. *.(i2 effect_params′):
                        if. ¬(is_permutation(effect_params effect_params′ =effect_var))
                            let. *.(name1 _ _ _ _ _) get(u_defs get(component 0))
                            let. *.(name2 _ _ _ _ _) get(u_defs get(component i2))
                            error(MutRecPolyDifferentType(name1 name2) file_pos)
                        else, *¡
                    let. effect_names map‡ effect_params λ. ev:
                        let. en new_effect_name(EffectNameNone)
                        set_effect(ev EffectNamed(en))
                        en
                    for‡ component λ. i:
                        let. *.(name _ _ _ _ _) get(u_defs i)
                        set. context i_add_let_binding(context VarBinding(name type_params effect_names get(fun_types i) ConstVB))
                    I_Statement(I_Fun(type_params i_defs) empty_effect file_pos)
                .None
                    let. i_defs map‡ component λ. i:
                        let. *.(_ _ u_params u_ret_type u_effects u_body) get(u_defs i)
                        let. *.(i_params bindings) u_func_params→i_func_params(u_params context′)
                        let. mut, context″ context′
                        for‡ bindings λ. binding:
                            set. context″ i_add_let_binding(context″ binding)
                        let. i_body u_expr→i_expr(u_body context″)
                        let. i_ret_type case. u_ret_type
                            .Some(u_ret_type) new_type_var_with_type(u_type→i_type(u_ret_type context′))
                            .None i_expr_type(i_body)
                        let. i_effect case. u_effects
                            .Some(u_effects) new_sum_effect(map(u_effects λ.(e: new_named_effect(u_effect→effect_name(e context′)))))
                            .None i_expr_effect(i_body)
                        set_type(get(fun_types i) I_Function(map(i_params i_func_param_type) i_ret_type i_effect) file_pos)
                        unify_type(i_expr_type(i_body) i_ret_type i_expr_file_pos(i_body))
                        unify_subeffect(i_expr_effect(i_body) i_effect i_expr_file_pos(i_body))
                        *.(i_params i_body)
                    let. fun_type_params map(component λ.(i: \(type_referenced_types(get(fun_types i)) context_referenced_types(context) =type_var)))
                    let. type_params get(fun_type_params 0)
                    for‡ ι*(fun_type_params) λ. *.(i2 type_params′):
                        if. ¬(is_permutation(type_params type_params′ =type_var))
                            let. *.(name1 _ _ _ _ _) get(u_defs get(component 0))
                            let. *.(name2 _ _ _ _ _) get(u_defs get(component i2))
                            error(MutRecPolyDifferentType(name1 name2) file_pos)
                        else, *¡
                    let. type_names map‡ type_params λ. tv:
                        let. tn new_type_name(None 0)
                        set_type(tv I_Named(tn list¡) file_pos)
                        tn
                    let. fun_effect_params map(component λ.(i: \(type_referenced_effects(get(fun_types i)) context_referenced_effects(context) =effect_var)))
                    let. effect_params get(fun_effect_params 0)
                    for‡ ι*(fun_effect_params) λ. *.(i2 effect_params′):
                        if. ¬(is_permutation(effect_params effect_params′ =effect_var))
                            let. *.(name1 _ _ _ _ _) get(u_defs get(component 0))
                            let. *.(name2 _ _ _ _ _) get(u_defs get(component i2))
                            error(MutRecPolyDifferentType(name1 name2) file_pos)
                        else, *¡
                    let. effect_names map‡ effect_params λ. ev:
                        let. en new_effect_name(EffectNameNone)
                        set_effect(ev EffectNamed(en))
                        en
                    for‡ component λ. i:
                        let. *.(name _ _ _ _ _) get(u_defs i)
                        set. context i_add_let_binding(context VarBinding(name type_names effect_names get(fun_types i) ConstVB))
                    I_Statement(I_Fun(type_names i_defs) empty_effect file_pos)
            *.(fun_statements list¡)
        .U_TypeStatement(name type_param_names u_variants)
            let. mut, context′ context
            let. type_params map‡ type_param_names λ. name:
                let. tn new_type_name(Some(name) 0)
                set. context′ i_add_type_binding(context tn)
                tn
            let. type_name get(type_names next_type_name)
            set. next_type_name +(next_type_name 1)
            let. type I_Named(type_name map(type_params λ.(tn: new_type_var_with_type(I_Named(tn list¡)))))
            let. type_tv new_type_var_with_type(type)
            let. i_variants map‡ u_variants λ. variant:
                let. *.(variant_name u_params) variant
                let. i_params map(u_params λ.(t: new_type_var_with_type(u_type→i_type(t context′))))
                let. ctor_type if.(>(len(i_params) 0) new_type_var_with_type(I_Function(map(i_params λ.(t: I_FuncParamConstType(t))) type_tv empty_effect)) type_tv)
                set. context i_add_let_binding(context VarBinding(variant_name type_params list¡ ctor_type CtorVB))
                i_params
            *.(list.(I_Statement(I_TypeStatement(type_name type_params i_variants) empty_effect file_pos)) list¡)
        .U_Extern(name u_type)
            let. type new_type_var_with_type(u_type→i_type(u_type context))
            set. context i_add_let_binding(context VarBinding(name list¡ list¡ type ConstVB))
            *.(list.(I_Statement(I_Extern(name type) empty_effect file_pos)) list¡)
        .U_Set(name u_expr)
            let. vi locate_var(name context file_pos)
            let. *.(_ _ var_type) variable_type(vi context)
            if. ∨.(¬(variable_is_mut(vi context)))
                error(AssignToConst(name) file_pos)
            else, *¡
            let. i_expr u_expr→i_expr(u_expr context)
            unify_type(i_expr_type(i_expr) var_type i_expr_file_pos(i_expr))
            *.(list.(I_Statement(I_Set(vi i_expr) i_expr_effect(i_expr) file_pos)) list.(EffectAdd(i_expr_effect(i_expr)) EffectAdd(variable_effect(vi context))))
        .U_EffectStatement(name)
            let. en new_effect_name(EffectNameSome(name))
            set. context i_add_effect(context en)
            *.(list.(I_Statement(I_EffectStatement(en) empty_effect file_pos)) list¡)
        )
    set_type(this_type last_expr_type file_pos)
    *.(concat(i_statements_) new_compound_effect(concat(effect_components_)))

fun. u_patterns→i_patterns(∈.(u_patterns List(U_Pattern)) ∈.(context I_Context))
    let. *.(i_patterns bindings_) unzip(map(u_patterns λ.(p: u_pattern→i_pattern(p context))))
    let. bindings concat(bindings_)
    *.(i_patterns bindings)

fun. u_pattern→i_pattern(∈.(u_pattern U_Pattern) ∈.(context I_Context))
    let. this_type new_type_var()
    let. U_Pattern(u_pattern_data file_pos) u_pattern
    let. *.(i_pattern_data bindings) case. u_pattern_data
        .U_IntLiteralPattern(n)
            set_type(this_type I_Named(int_type list¡) file_pos)
            *.(I_IntLiteralPattern(n) list¡)
        .U_IdentPattern(name)
            case. locate_var_opt(name context)
            .Some(vi)
                if. variable_is_nullary_ctor(vi context)
                    let. *.(type_params effect_params type) variable_type(vi context)
                    let. *.(ctor_type type_args) instantiate_params(type_params effect_params type file_pos)
                    unify_type(ctor_type this_type file_pos)
                    *.(I_VariantPattern(vi list¡ type_args) list¡)
                if, variable_is_ctor(vi context)
                    error(IsCtor(name) file_pos)
                else, *.(I_IdentPattern list.(VarBinding(name list¡ list¡ this_type ConstVB)))
            .None
                *.(I_IdentPattern list.(VarBinding(name list¡ list¡ this_type ConstVB)))
        .U_WildcardPattern
            *.(I_WildcardPattern list¡)
        .U_TuplePattern(u_patterns)
            let. *.(i_patterns bindings) u_patterns→i_patterns(u_patterns context)
            set_type(this_type I_TupleType(map(i_patterns i_pattern_type)) file_pos)
            *.(I_TuplePattern(i_patterns) bindings)
        .U_VariantPattern(name u_args)
            let. *.(i_args bindings) u_patterns→i_patterns(u_args context)
            let. vi locate_var(name context file_pos)
            if. variable_is_ctor(vi context)
                let. *.(type_params effect_params type) variable_type(vi context)
                let. *.(ctor_type type_args) instantiate_params(type_params effect_params type file_pos)
                set_type(ctor_type I_Function(map(i_args λ.(p: I_FuncParamConstType(i_pattern_type(p)))) this_type empty_effect) file_pos)
                *.(I_VariantPattern(vi i_args type_args) bindings)
            else, error(NotACtor(name) file_pos)
        .U_ListPattern(u_patterns)
            let. *.(i_patterns bindings) u_patterns→i_patterns(u_patterns context)
            let. elem_type new_type_var()
            set_type(this_type I_Named(list_type list.(elem_type)) file_pos)
            for‡ i_patterns λ. i_pattern: unify_type(i_pattern_type(i_pattern) elem_type file_pos)
            *.(I_ListPattern(i_patterns elem_type) bindings)
        .U_TypedPattern(u_pattern u_type)
            let. *.(i_pattern bindings) u_pattern→i_pattern(u_pattern context)
            unify_type(this_type i_pattern_type(i_pattern) file_pos)
            set_type(this_type u_type→i_type(u_type context) file_pos)
            let. I_Pattern(i_pattern_data _ _) i_pattern
            *.(i_pattern_data bindings)
    *.(I_Pattern(i_pattern_data this_type file_pos) bindings)

fun. u_func_param_type→i_func_param_type(∈.(u_param_type U_FuncParamType) ∈.(context I_Context))
    case. u_param_type
    .U_FuncParamConstType(u_type) I_FuncParamConstType(new_type_var_with_type(u_type→i_type(u_type context)))
    .U_FuncParamMutType(u_type) I_FuncParamMutType(new_type_var_with_type(u_type→i_type(u_type context)) new_effect_name(EffectNameNone))

fun. u_type→i_type(∈.(u_type U_Type) ∈.(context I_Context))
    let. U_Type(type_data file_pos) u_type
    case. type_data
    .U_Named(name u_args)
        let. tn type_from_name(name context file_pos)
        let. TypeName(tni) tn
        let. *.(_ arity) get(named_types tni)
        if. ≠(arity len(u_args))
            error(IncorrectTypeArity(len(u_args) arity) file_pos)
        else, *¡
        let. i_args map(u_args λ.(t: new_type_var_with_type(u_type→i_type(t context))))
        I_Named(tn i_args)
    .U_TupleType(u_types)
        let. i_types map(u_types λ.(t: new_type_var_with_type(u_type→i_type(t context))))
        I_TupleType(i_types)
    .U_Function(u_params u_ret u_effects)
        let. i_params map(u_params λ.(pt: u_func_param_type→i_func_param_type(pt context)))
        let. i_ret new_type_var_with_type(u_type→i_type(u_ret context))
        let. i_effect case. u_effects
            .Some(u_effects) new_sum_effect(map(u_effects λ.(e: new_named_effect(u_effect→effect_name(e context)))))
            .None empty_effect
        I_Function(i_params i_ret i_effect)

fun. u_effect→effect_name(∈.(u_effect U_Effect) ∈.(context I_Context))
    let. U_Effect(u_effect_data file_pos) u_effect
    case. u_effect_data
    .U_NamedEffect(name)
        effect_from_name(name context file_pos)
    .U_VarEffect(name)
        let. vi locate_var(name context file_pos)
        case. variable_effect_name(vi context)
        .Some(en) en
        .None error(EffectOfConst(name) file_pos)
