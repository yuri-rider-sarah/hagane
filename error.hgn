extern. vector_string_error ⇒.(Int Int : *.())

type. FilePos FilePos(List(Int) Int Int)

type. PartialType
    P_Var(Int)
    P_Applied(List(Int) List(PartialType))
    P_TupleType(List(PartialType))
    P_Function(List(PartialType) PartialType)

let. mut, partial_type→string λ. ∈.(type PartialType): list.()
set. partial_type→string λ. ∈.(type PartialType):
    case. type
    .P_Var(n) ++("?" int→string(n))
    .P_Applied(name list.()) name
    .P_Applied(name types) concat‡ list.
        name "(" intercalate(map(types partial_type→string) " ") ")"
    .P_TupleType(types) concat‡ list.
        "*.(" intercalate(map(types partial_type→string) " ") ")"
    .P_Function(params ret) concat‡ list.
        "⇒.(" concat(map(params λ.(p: ++(partial_type→string(p) " ")))) ": " partial_type→string(ret) ")"

type. Error
    UnexpectedChar(Option(Int))
    UnexpectedToken(Token)
    InvalidExpr(Option(List(Int)))
    InvalidPattern
    InvalidType
    UnboundVariable(List(Int))
    UnboundType(List(Int))
    IncorrectTypeArity(Int Int)
    ConflictingType(PartialType PartialType)
    CyclicalType
    DuplicateVar(List(Int))
    DuplicateType(List(Int))
    AssignToConst(List(Int))
    NotACtor(List(Int))
    InexhaustivePatterns
    UnusedTypeParam(List(Int))
    AmbiguousType(PartialType)
    LeakedType(List(Int))
    InvalidExternType(List(Int))

let. string_error λ. ∈.(str List(Int)) ∈.(internal Int):
    vector_string_error(utf8_encode(list→vector(str)) internal)
    unreachable()

let. file_pos_string λ. ∈.(file_pos FilePos):
    let. FilePos(file_name line col) file_pos
    concat(list.(file_name ":" int→string(line) ":" int→string(col)))

let. error_string λ. ∈.(err Error):
    case. err
    .UnexpectedChar(Some(c)) concat(list.("Unexpected character: " list.(c) " (" int→string(c) ")"))
    .UnexpectedChar(None) "Unexpected end of file"
    .UnexpectedToken(token) "Unexpected token"
    .InvalidExpr(None) "Invalid expression"
    .InvalidExpr(Some(kw)) concat(list.("Invalid " kw " expression"))
    .InvalidPattern "Invalid pattern"
    .InvalidType "Invalid type"
    .UnboundVariable(name) ++("Unbound variable: " name)
    .UnboundType(name) ++("Unbound type: " name)
    .IncorrectTypeArity(n1 n2) concat(list.("Incorrect number of type arguments: expected " int→string(n1) ", got " int→string(n2)))
    .ConflictingType(t1 t2) concat(list.("Conflicting type: expected " partial_type→string(t1) ", got " partial_type→string(t2)))
    .CyclicalType "Cyclical type"
    .DuplicateVar(name) ++("Duplicate variable " name)
    .DuplicateType(name) ++("Duplicate type " name)
    .AssignToConst(name) ++("Assignment to constant variable " name)
    .NotACtor(name) ++(name " is not a constructor")
    .InexhaustivePatterns "Inexhaustive patterns"
    .UnusedTypeParam(name) ++("Unused type parameter " name)
    .AmbiguousType(t) ++("Ambiguous type " partial_type→string(t))
    .LeakedType(name) ++("Inferred type contains leaked type " name)
    .InvalidExternType(name) ++("Invalid extern type for variable " name)

let. error λ. ∈.(err Error) ∈.(file_pos FilePos):
    string_error(concat(list.(file_pos_string(file_pos) ": " error_string(err))) 0)

let. internal_error λ. ∈.(err List(Int)):
    string_error(++("Internal compiler error: " err) 1)
