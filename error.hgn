extern. vector_string_error ‡(Int Int : #())

type. FilePos FilePos(List(Int) Int Int)

type. PartialType
    P_Var(Int)
    P_Applied(List(Int) List(PartialType))
    P_TupleType(List(PartialType))
    P_Function(List(PartialType) PartialType)

let. mut, partial_type→string λ.{type 'PartialType} empty[Int]
set. partial_type→string λ.{type 'PartialType}
    match. type
    .P_Var(n) ++[Int]("?" int→string(n))
    .P_Applied(name list.()) name
    .P_Applied(name types) concat[Int](list.(
    name "(" intercalate[Int](map[PartialType List(Int)](types partial_type→string) " ") ")"
    ))
    .P_TupleType(types) concat[Int](list.(
    "#(" intercalate[Int](map[PartialType List(Int)](types partial_type→string) " ") ")"
    ))
    .P_Function(params ret) concat[Int](list.(
    "‡(" concat[Int](map[PartialType List(Int)](params λ.(p 'PartialType ++[Int](partial_type→string(p) " ")))) ": " partial_type→string(ret) ")"
    ))

type. Error
    UnexpectedChar(Option(Int))
    UnexpectedToken(Token)
    InvalidExpr(Option(List(Int)))
    InvalidPattern()
    InvalidType()
    UnboundVariable(List(Int))
    UnboundType(List(Int))
    IncorrectTypeArity(Int Int)
    ConflictingType(PartialType PartialType)
    CyclicalType()
    AssignToConst(List(Int))
    NotACtor(List(Int))
    UnusedTypeParam(List(Int))
    AmbiguousType(PartialType)
    LeakedType(List(Int))
    InvalidExternType(List(Int))

let. string_error λ.{str 'List(Int) internal 'Int}
    vector_string_error(utf8_encode(list→vector(str)) internal)

let. file_pos_string λ.{file_pos 'FilePos}
    let. FilePos(file_name line col) file_pos
    concat[Int](list.(file_name ":" int→string(line) ":" int→string(col)))

let. error_string λ.{err 'Error}
    match. err
    .UnexpectedChar(Some(c)) concat[Int](list.("Unexpected character: " list.(c) " (" int→string(c) ")"))
    .UnexpectedChar(None()) "Unexpected end of file"
    .UnexpectedToken(token) "Unexpected token"
    .InvalidExpr(None()) "Invalid expression"
    .InvalidExpr(Some(kw)) concat[Int](list.("Invalid " kw " expression"))
    .InvalidPattern() "Invalid pattern"
    .InvalidType() "Invalid type"
    .UnboundVariable(name) ++[Int]("Unbound variable: " name)
    .UnboundType(name) ++[Int]("Unbound type: " name)
    .IncorrectTypeArity(n1 n2) concat[Int](list.("Incorrect number of type arguments: expected " int→string(n1) ", got " int→string(n2)))
    .ConflictingType(t1 t2) concat[Int](list.("Conflicting type: expected " partial_type→string(t1) ", got " partial_type→string(t2)))
    .CyclicalType() "Cyclical type"
    .AssignToConst(name) ++[Int]("Assignment to constant variable " name)
    .NotACtor(name) ++[Int](name " is not a constructor")
    .UnusedTypeParam(name) ++[Int]("Unused type parameter " name)
    .AmbiguousType(t) ++[Int]("Ambiguous type " partial_type→string(t))
    .LeakedType(name) ++[Int]("Inferred type contains leaked type " name)
    .InvalidExternType(name) ++[Int]("Invalid extern type for variable " name)

let. error λ.{err 'Error file_pos 'FilePos}
    string_error(concat[Int](list.(file_pos_string(file_pos) ": " error_string(err))) 0)

let. unreachable λ.{err 'List(Int)}
    string_error(++[Int]("Internal compiler error: " err) 1)
