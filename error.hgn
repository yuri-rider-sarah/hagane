extern. vector_string_error ⇒.(Int Int : *¡)

type. FilePos FilePos(List(Int) Int Int)

type. PartialParamType
    P_FuncParamConstType(PartialType)
    P_FuncParamMutType(PartialType)

type. PartialType
    P_Var(Int)
    P_Applied(List(Int) List(PartialType))
    P_TupleType(List(PartialType))
    P_Function(List(PartialParamType) PartialType Int)

fun. partial_param_type→string(∈.(pt PartialParamType))
    case. pt
    .P_FuncParamConstType(t) partial_type→string(t)
    .P_FuncParamMutType(t) concat(list.("~.(" partial_type→string(t) ")"))

fun. partial_type→string(∈.(type PartialType))
    case. type
    .P_Var(n) ++("?" int→string(n))
    .P_Applied(name list¡) name
    .P_Applied(name types) concat‡ list.
        name "(" intercalate(map(types partial_type→string) " ") ")"
    .P_TupleType(types) concat‡ list.
        "*.(" intercalate(map(types partial_type→string) " ") ")"
    .P_Function(params ret eff) concat‡ list.
        "⇒.(" concat(map(params λ.(p: ++(partial_param_type→string(p) " ")))) ": " partial_type→string(ret) "ε, ?E" int→string(eff) ")"

type. Error
    UnexpectedChar(Option(Int))
    UnexpectedToken(Token)
    InvalidExpr(Option(List(Int)))
    InvalidPattern
    InvalidType
    UnboundVariable(List(Int))
    UnboundType(List(Int))
    IncorrectTypeArity(Int Int)
    ConflictingType(PartialType PartialType)
    CyclicalType
    AssignToConst(List(Int))
    PassConstVariableAsMut(List(Int))
    IsCtor(List(Int))
    NotACtor(List(Int))
    InexhaustivePatterns
    UnusedTypeParam(List(Int))
    AmbiguousType(PartialType)
    AmbiguousEffect
    LeakedType(List(Int))
    LeakedEffect(List(Int))
    InvalidExternType(List(Int))
    MutRecPolyDifferentType(List(Int) List(Int))

fun. string_error(∈.(str List(Int)) ∈.(internal Int))
    vector_string_error(utf8_encode(list→vector(str)) internal)
    unreachable()

fun. file_pos_string(∈.(file_pos FilePos))
    let. FilePos(file_name line col) file_pos
    concat(list.(file_name ":" int→string(line) ":" int→string(col)))

fun. error_string(∈.(err Error))
    case. err
    .UnexpectedChar(Some(c)) concat(list.("Unexpected character: " list.(c) " (" int→string(c) ")"))
    .UnexpectedChar(None) "Unexpected end of file"
    .UnexpectedToken(token) "Unexpected token"
    .InvalidExpr(None) "Invalid expression"
    .InvalidExpr(Some(kw)) concat(list.("Invalid " kw " expression"))
    .InvalidPattern "Invalid pattern"
    .InvalidType "Invalid type"
    .UnboundVariable(name) ++("Unbound variable: " name)
    .UnboundType(name) ++("Unbound type: " name)
    .IncorrectTypeArity(n1 n2) concat(list.("Incorrect number of type arguments: expected " int→string(n1) ", got " int→string(n2)))
    .ConflictingType(t1 t2) concat(list.("Conflicting type: expected " partial_type→string(t1) ", got " partial_type→string(t2)))
    .CyclicalType "Cyclical type"
    .AssignToConst(name) ++("Assignment to constant variable " name)
    .PassConstVariableAsMut(name) concat(list.("Constant variable " name " passed as mutable argument"))
    .IsCtor(name) ++(name " is a constructor")
    .NotACtor(name) ++(name " is not a constructor")
    .InexhaustivePatterns "Inexhaustive patterns"
    .UnusedTypeParam(name) ++("Unused type parameter " name)
    .AmbiguousType(t) ++("Ambiguous type " partial_type→string(t))
    .AmbiguousEffect "Ambiguous effect"
    .LeakedType(name) ++("Inferred type contains leaked type " name)
    .LeakedEffect(name) ++("Inferred effect contains leaked effect " name)
    .InvalidExternType(name) ++("Invalid extern type for variable " name)
    .MutRecPolyDifferentType(name1 name2) concat(list.("Mutually recursive functions " name1 " and " name2 " are polymorphic over different types"))

fun. error(∈.(err Error) ∈.(file_pos FilePos))
    string_error(concat(list.(file_pos_string(file_pos) ": " error_string(err))) 0)

fun. internal_error(∈.(err List(Int)))
    string_error(++("Internal compiler error: " err) 1)
